
## PROJECT OVERVIEW
Project: Astro

## CODE STYLE
Adhere to standard TypeScript coding conventions.  Avoid using the `any` type.  Unused variables and imports should be removed.

## FOLDER ORGANIZATION
(No information provided in the interaction)

## TECH STACK
TypeScript, ESLint, Jest, Vitest, Resend

## PROJECT-SPECIFIC STANDARDS
- Unused variables and imports should be removed.  Address all ESLint warnings about unused code.  If a variable is declared but never used, remove it.
- Proper Jest configuration is required for TypeScript projects.  Ensure Jest types are correctly configured.  A `jest.config.js` or equivalent needs to be created and properly configured.  Check `package.json` for necessary Jest dependencies.  Note:  Migrating to Vitest is recommended for new tests.  A `jest.config.ts` file should be created for Jest configuration, and a Jest setup file (e.g., `setupTests.ts`) is needed to declare Jest globals for TypeScript projects.  Refer to the example in the `REFERENCE EXAMPLES` section.  If using Vitest, ensure it's correctly configured and integrated.
-  Conflict noted:  While the previous standard recommended `jest.config.ts`, the interaction showed a migration to Vitest.  For new tests, Vitest is now the preferred testing framework.


## WORKFLOW & RELEASE RULES
(No information provided in the interaction)

## REFERENCE EXAMPLES
**Example Jest Setup File (setupTests.ts):**

```typescript
import '@testing-library/jest-dom';

// Make Jest available globally
declare global {
  // eslint-disable-next-line no-var
  var jest: typeof import('@jest/globals')['jest'];
  // eslint-disable-next-line no-var
  var describe: typeof import('@jest/globals')['describe'];
  // eslint-disable-next-line no-var
  var it: typeof import('@jest/globals')['it'];
  // eslint-disable-next-line no-var
  var expect: typeof import('@jest/globals')['expect'];
  // eslint-disable-next-line no-var
  var beforeAll: typeof import('@jest/globals')['beforeAll'];
  // eslint-disable-next-line no-var
  var afterAll: typeof import('@jest/globals')['afterAll'];
  // eslint-disable-next-line no-var
  var beforeEach: typeof import('@jest/globals')['beforeEach'];
  // eslint-disable-next-line no-var
  var afterEach: typeof import('@jest/globals')['afterEach'];
}
```

## PROJECT DOCUMENTATION & CONTEXT SYSTEM
(No information provided in the interaction)

## DEBUGGING
Utilize ESLint to identify and resolve TypeScript linting issues, including unused variables, type issues, and Jest configuration problems. Address warnings and errors promptly.  If using Vitest, ensure it's correctly configured and integrated.  Address all ESLint warnings, including those related to unused variables and imports.

## FINAL DOs AND DON'Ts
- **DO:** Use explicit types in TypeScript.
- **DO:** Remove unused variables and imports.  Address ESLint warnings about unused code.
- **DO:** Configure Jest correctly for your TypeScript project, or migrate to Vitest for new tests.  Use a `jest.config.ts` and a setup file to declare Jest globals.
- **DON'T:** Use the `any` type unless absolutely necessary.
- **DON'T:** Leave unresolved linting errors or warnings.
- **DON'T:** Ignore ESLint warnings about unused code.
- **DO:**  If a variable is declared but never used, remove it.