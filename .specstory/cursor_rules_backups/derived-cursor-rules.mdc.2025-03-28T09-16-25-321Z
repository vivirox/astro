
## PROJECT OVERVIEW
Project: Astro

## CODE STYLE
Adhere to standard TypeScript coding conventions.  Avoid using the `any` type.  Unused variables and imports should be removed.

## FOLDER ORGANIZATION
(No information provided in the interaction)

## TECH STACK
TypeScript, ESLint, Jest, Vitest, Resend

## PROJECT-SPECIFIC STANDARDS
- Unused variables and imports should be removed.  Address all ESLint warnings about unused code.  If a variable is declared but never used, remove it.
- Vitest is the preferred testing framework for new tests. Jest should be used for existing tests until migration is complete.  A `vitest.config.ts` file should be created for Vitest configuration, and a Vitest setup file (e.g., `vitest.setup.ts`) is needed to declare Vitest globals for TypeScript projects.  The `jest.config.ts` and associated Jest setup file are deprecated for new tests.
- Proper configuration is required for both Jest (for existing tests) and Vitest (for new tests).  Ensure types are correctly configured for each.

## WORKFLOW & RELEASE RULES
(No information provided in the interaction)

## REFERENCE EXAMPLES
**Example Vitest Setup File (vitest.setup.ts):**

```typescript
import '@testing-library/jest-dom'
import { expect, afterEach } from 'vitest'
import { cleanup } from '@testing-library/react'
import matchers from '@testing-library/jest-dom/matchers'

// Extend Vitest's expect with @testing-library/jest-dom's matchers
expect.extend(matchers)

// Clean up after each test
afterEach(() => {
  cleanup()
})
```

**Example Jest Setup File (setupTests.ts):**  *(Deprecated for new tests)*

```typescript
import '@testing-library/jest-dom';

// Make Jest available globally
declare global {
  // eslint-disable-next-line no-var
  var jest: typeof import('@jest/globals')['jest'];
  // eslint-disable-next-line no-var
  var describe: typeof import('@jest/globals')['describe'];
  // eslint-disable-next-line no-var
  var it: typeof import('@jest/globals')['it'];
  // eslint-disable-next-line no-var
  var expect: typeof import('@jest/globals')['expect'];
  // eslint-disable-next-line no-var
  var beforeAll: typeof import('@jest/globals')['beforeAll'];
  // eslint-disable-next-line no-var
  var afterAll: typeof import('@jest/globals')['afterAll'];
  // eslint-disable-next-line no-var
  var beforeEach: typeof import('@jest/globals')['beforeEach'];
  // eslint-disable-next-line no-var
  var afterEach: typeof import('@jest/globals')['afterEach'];
}
```

## PROJECT DOCUMENTATION & CONTEXT SYSTEM
(No information provided in the interaction)

## DEBUGGING
Utilize ESLint to identify and resolve TypeScript linting issues, including unused variables, type issues, and testing framework configuration problems. Address warnings and errors promptly.  If using Vitest, ensure it's correctly configured and integrated. Address all ESLint warnings, including those related to unused variables and imports. Prioritize resolving critical issues such as redeclaration errors, unsafe optional chaining, undefined variables, and parsing errors before addressing less critical warnings. Ensure proper Jest type configuration for existing tests or migrate to Vitest for new tests.  Prioritize resolving critical ESLint errors (redeclaration, unsafe optional chaining, undefined variables, parsing errors) before addressing warnings.

## FINAL DOs AND DON'Ts
- **DO:** Use explicit types in TypeScript.
- **DO:** Remove unused variables and imports.  Address ESLint warnings about unused code.
- **DO:** Configure Vitest correctly for new TypeScript tests. Use a `vitest.config.ts` and a setup file to declare Vitest globals.  For existing tests, configure Jest correctly, or migrate to Vitest.
- **DON'T:** Use the `any` type unless absolutely necessary.
- **DON'T:** Leave unresolved linting errors or warnings.
- **DON'T:** Ignore ESLint warnings about unused code.
- **DO:** If a variable is declared but never used, remove it.
- **DO:** Prioritize resolving critical ESLint errors (redeclaration, unsafe optional chaining, undefined variables, parsing errors) before addressing warnings.
- **DO:** For new tests, use Vitest; for existing tests, use Jest until migration is complete.