# Cursor AI System Configuration

<system_context>
You are a multi-agent system coordinator operating in a development environment. Your primary goal is to assist in completing user requirements through planning and execution of tasks.
</system_context>

<agent_roles>
1. PLANNER
   - Primary: High-level analysis and task breakdown
   - Tools: plan_exec_llm.py for strategic planning
   - Responsibilities:
     * Define success criteria
     * Evaluate progress
     * Set milestones
     * Coordinate with Executor

2. EXECUTOR
   - Primary: Implementation and testing
   - Tools: All development and testing tools
   - Responsibilities:
     * Code implementation
     * Testing and validation
     * Progress reporting
     * Status updates
</agent_roles>

<workspace_configuration>
Environment: conda activate gradiant

IMPORTANT: Make better use of the available Python tools! Before diving into implementation, always try to:

1. Use search_engine.py to research solutions and best practices
2. Use web_scraper.py to gather detailed documentation
3. Use llm_api.py for complex analysis tasks
4. Combine tools for a better research workflow

Remember: These tools are here to help make better informed decisions. Use them proactively!

Available Tools:
- search_engine.py: Research solutions and best practices
  * Use for initial research on libraries and frameworks
  * Find current best practices and patterns
  * Discover recent updates and changes
  * Validate assumptions about technologies

- web_scraper.py: Documentation gathering
  * Fetch detailed documentation
  * Gather implementation examples
  * Access current API references
  * Collect usage patterns and guides

- llm_api.py: Complex analysis (gemini provider)
  * Analyze technical decisions
  * Evaluate implementation approaches
  * Review code patterns
  * Generate implementation strategies
  * Note: Currently use 'gemini' provider for best results

- screenshot_utils.py: UI verification
  * Capture and verify UI states
  * Document visual implementations
  * Validate design consistency
  * Test responsive behaviors

- plan_exec_llm.py: Strategic planning
  * High-level task analysis
  * Project structure planning
  * Architecture decisions
  * Implementation strategies

Note: All tools are in Python. For batch processing or custom needs, you can always:
1. Review the Python files in the tools directory
2. Combine tools for more comprehensive analysis
3. Create custom scripts using the tool APIs
4. Chain tools together for complex workflows

Remember to always verify tool results and cross-reference findings!
</workspace_configuration>

<package_manager>
IMPORTANT: Always use pnpm as the package manager for this project.
- Use `pnpm install` for adding dependencies
- Use `pnpm add -D` for dev dependencies
- Use `pnpm update` for updates
- Never use npm or yarn
</package_manager>

<project_status>
Current Progress:
- Core Infrastructure: 100% (Documentation pending)
- Hooks and Custom Logic: 90% (Context providers in progress)
- Utility Services: 80% (Notification service enhancement in progress)
- Docker Configuration: 100% (Fully configured for Astro with pnpm)
- Build Process: 100% (Successfully building with pnpm)
- Search Functionality: 90% (Flexsearch integration prepared but disabled due to compatibility issues)

Priority Tasks:
1. HIGH PRIORITY:
   - Advanced Therapeutic Analytics
     * Long-term trend analysis
     * Cross-session pattern detection
     * Risk factor correlation analysis
   - Documentation
     * API documentation
     * Security guidelines
     * Deployment procedures ✓
     * User guides
     * Monitoring documentation
   - Testing
     * Integration tests
     * Performance tests
     * Load tests
     * End-to-end tests
   - Search Implementation
     * Fix module resolution error between astro:scripts/page.js and ../lib/search
     * Test search functionality on all supported platforms
     * Optimize search for better performance

2. MEDIUM PRIORITY:
   - Client Scenarios
     * Specialized conditions coverage
     * Demographic-specific scenarios
     * Emergency response modules
   - Feature Enhancements
     * Pattern detection rules
     * Comparison functionality
     * Export capabilities
     * Intervention suggestions
     * ML integration
   - Plugin Ecosystem
     * Plugin marketplace
     * Plugin documentation
     * Example plugins
</project_status>

<development_guidelines>
Core Standards:
- TypeScript with strict typing
- HIPAA compliance
- Comprehensive error handling
- Thorough documentation
- Extensive testing
- FHE for sensitive operations
- Security best practices
- Consistent audit logging
- Research before implementation:
  * Always verify current documentation
  * Never assume knowledge is current
  * Use search tools for up-to-date information
  * Validate assumptions with recent sources
- Code Quality:
  * Avoid underscore naming
  * No linter disabling - fix root causes
  * Follow language idioms
  * Use proper naming conventions
  * Maintain consistent style

Architecture:
- Component composition
- Effect cleanup
- Error boundaries
- Provider patterns
- Type safety
- Performance optimization

Security:
- Key management/rotation
- HIPAA-compliant operations
- Client-side processing
- Data separation
- Verification tokens
- Regular audits

Infrastructure:
- Redis (caching/queues)
- Monitoring systems
- Scaling practices
- Backup protocols
- Automated deployment
- Performance metrics
</development_guidelines>

<communication_protocol>
1. Always acknowledge the current context before proceeding
2. Use markdown formatting for responses
3. Maintain clear task hierarchies
4. Report progress after each significant action:
   * Update project status in .cursorrules
   * Mark completed tasks
   * Add new tasks as discovered
   * Document any blockers or dependencies
5. Flag blockers immediately
6. Document decisions and rationale
</communication_protocol>

<scratchpad_protocol>
The Multi-Agent Scratchpad is a critical workspace for task planning and execution. For each new task:

1. Initial Analysis
   * Document task requirements and scope
   * List known constraints and dependencies
   * Identify potential challenges
   * Note areas requiring research

2. Planning Phase
   * Break down task into subtasks
   * Create ordered implementation steps
   * Document research findings
   * List required resources or tools

3. Progress Tracking
   * Update task status and milestones
   * Document decisions and rationales
   * Track blockers and solutions
   * Note lessons learned

4. Task Completion
   * Summarize implementation details
   * Document testing results
   * Note any follow-up tasks
   * Update project status

Always update .cursorrules with:
- New task breakdowns
- Implementation plans
- Progress updates
- Discovered dependencies
- Research findings
- Lessons learned
</scratchpad_protocol>

<multi_agent_scratchpad>
### Current Task Analysis

Focus Area: MentalLLaMA Integration & Deployment Setup
Priority: High
Impact: Enhanced mental health analysis capabilities and improved deployment pipeline

### Implementation Progress

Current Status:
- MentalLLaMA Core Components: 100% complete
  - MentalLLaMAAdapter implementation ✓
  - MentalLLaMAPythonBridge implementation ✓
  - MentalLLaMAFactory implementation ✓
  - Demo script implementation ✓
  - Documentation ✓
- Extended Mental Health Categories: 100% complete
  - Added bipolar_disorder category ✓
  - Added OCD category ✓
  - Added eating_disorder category ✓
  - Added social_anxiety category ✓
  - Added panic_disorder category ✓
  - Updated evidence extraction patterns ✓
- Expert Explanations Integration: 100% complete
  - Added comprehensive expert explanations for all categories ✓
  - Implemented expert-guided explanation generation ✓
  - Added CLI support for expert explanations ✓
  - Updated documentation ✓
- Deployment Configuration: 100% complete
  - Updated Dockerfile for Astro and pnpm ✓
  - Created Docker entrypoint script ✓
  - Ensured proper build commands and environment setup ✓
  - Fixed TypeScript errors and interface exports ✓
  - Successfully built project with pnpm ✓
- Search Implementation: 90% complete
  - Removed pagefind dependency ✓
  - Created mock content collection system ✓
  - Prepared flexsearch integration ✓
  - Downgraded flexsearch to version 0.7.31 for better compatibility ✓
  - Temporarily disabled due to module resolution error between astro:scripts/page.js and ../lib/search ✓
  - Build working with current configuration ✓

### Next Tasks

1. Search Implementation (HIGH PRIORITY)
   - Investigate and resolve the module resolution error in the flexsearch integration
   - Problem: Cannot resolve "../lib/search" from "astro:scripts/page.js"
   - Potential solutions:
     * Fix the path resolution in the search integration
     * Create an alias for the search module in Astro's Vite configuration
     * Reimplement the search client injection mechanism
   - Test search functionality on all supported platforms once resolved

2. IMHI Benchmark Integration (Priority: Medium)
   - Implement more comprehensive testing across all categories
   - Add support for custom datasets
   - Create visualization for benchmark results

3. Visualization Tools (Priority: Medium)
   - Create dashboard for analysis results
   - Implement timeline visualization for longitudinal analysis
   - Add charts for category distribution

### Integration Notes
1. Completed Tasks
   - Core implementation of MentalLLaMA adapter ✓
   - Python bridge for original code execution ✓
   - Factory for easy adapter creation ✓
   - Analysis capabilities for mental health indicators ✓
   - Enhanced mental health categories (bipolar, OCD, eating disorders, etc.) ✓
   - Expert-guided explanations for improved quality ✓
   - CLI tool for easy analysis ✓

2. Next Phase Focus
   - Complete IMHI benchmark integration
   - Create visualization tools for analysis results

3. Considerations
   - Maintain HIPAA compliance
   - Continue ensuring ethical usage of analysis tools
   - Focus on interpretability and explanation quality
</multi_agent_scratchpad>

<error_handling>
1. Identify error source and scope
2. Document error context
3. Propose solution options
4. Implement approved fixes
5. Verify resolution
6. Update documentation
</error_handling>

<gradiant_integration>
### Gradiant Integration Plan - Phase 1 (EHR Core)

Current Status: Completed
Priority: Critical
Impact: Major feature enhancement

#### Implementation Progress

1. Core Infrastructure (Completed)
   - [x] Create EHR directory structure
   - [x] Setup base interfaces
   - [x] Configure initial dependencies
   - [x] Create core types and interfaces
   - [x] Implement EHR service
   - [x] Create FHIR client
   - [x] Setup plugin system base
   - [x] Implement Redis storage
   - [x] Add OAuth2 implementation
   - [x] Add provider-specific configurations
   - [x] Implement security enhancements
   - [x] Add comprehensive tests

2. Provider Integration (Completed)
   - [x] Epic provider implementation
   - [x] Cerner provider implementation
   - [x] Allscripts provider implementation
   - [x] Athenahealth provider implementation
   - [x] Provider-specific tests
   - [ ] Integration tests

3. Plugin System (Completed)
   - [x] Plugin registry implementation
   - [x] Plugin API implementation
   - [x] Storage system implementation
   - [x] Event system enhancement
   - [ ] Plugin marketplace setup
   - [ ] Plugin documentation
   - [ ] Example plugins

4. Security (Completed)
   - [x] Access control implementation
   - [x] Audit logging enhancement
   - [x] Provider security setup
   - [x] Encryption implementation
   - [x] Security testing

#### Next Actions

1. Immediate (Today)
   - [ ] Create integration test infrastructure
   - [ ] Implement performance test suite
   - [ ] Begin API documentation
   - [ ] Setup end-to-end test framework

2. Short-term (This Week)
   - [ ] Complete integration test suite
   - [ ] Implement load tests
   - [ ] Create developer guide
   - [ ] Document security features

3. Documentation
   - [ ] API documentation
   - [ ] Integration guides
   - [ ] Plugin development guide
   - [ ] Security documentation

4. Testing
   - [ ] Integration tests
   - [ ] Performance tests
   - [ ] Load tests
   - [ ] End-to-end tests

#### Dependencies to Install
- [x] @gradiant/ehr
- [x] @gradiant/plugin-sdk
- [x] @gradiant/fhir-client
- [x] @gradiant/security
- [x] redis
- [x] @gradiant/cli
- [x] @gradiant/plugin-tools
- [x] @gradiant/test-utils

#### Integration Notes
1. Core Implementation
   - OAuth2 service fully implemented with token management and refresh handling
   - FHIR client created with comprehensive API support
   - Plugin system foundation established with registry and API
   - Redis storage integration complete
   - Security features fully implemented:
     - Token encryption with AES-256-GCM
     - Comprehensive audit logging
     - Rate limiting for API protection
     - Access control for provider resources

2. Next Steps
   - Focus on advanced testing
   - Create comprehensive documentation
   - Develop example plugins
   - Consider marketplace implementation

3. Considerations
   - Maintain HIPAA compliance standards
   - Continue robust error handling
   - Ensure comprehensive logging
   - Follow security best practices
</gradiant_integration>

<liftoff_integration>
### Liftoff-Inspired Real-Time Healthcare Simulation Module

Current Status: Implemented (Phase 1)
Priority: Medium
Impact: Enhanced user experience and training capabilities

#### Implementation Details

1. Real-Time Simulation Components (Implemented)
   - [x] Create real-time analysis infrastructure for patient simulations
   - [x] Implement stream-based processing
   - [x] Develop healthcare-specific real-time feedback system
   - [x] Design therapeutic response analysis with minimal data retention
   - [x] Build ephemeral session management system

2. Technical Architecture (Implemented)
   - [x] Create privacy-first infrastructure with zero data retention
   - [x] Implement real-time feedback generation system
   - [x] Create healthcare-specific prompt templates with privacy safeguards
   - [x] Build stateless feedback generation system
   - [x] Design zero-retention processing pipeline

3. Healthcare-Specific Enhancements (Implemented)
   - [x] Define simulated patient scenarios aligned with therapeutic domains
   - [x] Create real-time analysis metrics for therapeutic interventions
   - [x] Develop immediate feedback module for therapeutic techniques
   - [x] Design practitioner skill assessment framework with privacy preservation
   - [x] Implement scenario difficulty progression

4. Speech Recognition & Analysis Enhancement (Implemented)
   - [x] Implement domain-specific speech recognition utilities
   - [x] Create therapeutic keyword detection system
   - [x] Add real-time therapeutic prompt suggestions
   - [x] Implement technique detection in spoken responses
   - [x] Build empathy level measurement based on language analysis

#### Integration Benefits

1. Training Opportunities
   - Private practice simulation before real patient interactions
   - Real-time skill assessment and guidance
   - Evidence-based technique reinforcement
   - Stress-free practice environment
   - Immediate feedback on therapeutic approaches

2. User Experience
   - Safe environment to test therapeutic approaches
   - Real-time guidance on communication style
   - Immediate identification of improvement areas
   - No recording or long-term storage of sessions
   - Progress tracking through anonymized metrics only

3. Technical Advantages
   - No persistent storage of simulation sessions
   - HIPAA-compliant real-time processing
   - Healthcare-specific AI feedback models with minimal context retention
   - Integration with existing learning resources
   - Multi-modal feedback with no data persistence (real-time only)

#### Next Phase Implementation

1. Next Steps (Phase 2)
   - [ ] Enhance feedback generation with fine-tuned healthcare models
   - [ ] Implement additional therapeutic domains and scenarios
   - [ ] Expand metrics collection and visualization
   - [ ] Add support for recording practice sessions (with explicit consent)
   - [ ] Develop shared resources for therapeutic techniques

2. Future Enhancements (Phase 3)
   - [ ] Create community features for sharing anonymous insights
   - [ ] Develop custom scenario creation tools
   - [ ] Implement advanced therapeutic technique detection
   - [ ] Support for multi-language simulations
   - [ ] Integration with continuing education platforms
</liftoff_integration>
