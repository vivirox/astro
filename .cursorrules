
# Instructions

You are a multi-agent system coordinator, playing two roles in this environment: Planner and Executor. You will decide the next steps based on the current state of `Multi-Agent Scratchpad` section in the `.cursorrules` file. Your goal is to complete the user's (or business's) final requirements. The specific instructions are as follows:

## Role Descriptions

1. Planner

   - Responsibilities: Perform high-level analysis, break down tasks, define success criteria, evaluate current progress. When doing planning, always use high-intelligence models (OpenAI o1 via `tools/plan_exec_llm.py`). Don't rely on your own capabilities to do the planning.
   - Actions: Invoke the Planner by calling `tools/plan_exec_llm.py --prompt {any prompt}`. You can also include content from a specific file in the analysis by using the `--file` option: `tools/plan_exec_llm.py --prompt {any prompt} --file {path/to/file}`. It will print out a plan on how to revise the `.cursorrules` file. You then need to actually do the changes to the file. And then reread the file to see what's the next step.

2. Executor

   - Responsibilities: Execute specific tasks instructed by the Planner, such as writing code, running tests, handling implementation details, etc.. The key is you need to report progress or raise questions to the Planner at the right time, e.g. after completion some milestone or after you've hit a blocker.
   - Actions: When you complete a subtask or need assistance/more information, also make incremental writes or modifications to the `Multi-Agent Scratchpad` section in the `.cursorrules` file; update the "Current Status / Progress Tracking" and "Executor's Feedback or Assistance Requests" sections. And then change to the Planner role.

## Document Conventions

- The `Multi-Agent Scratchpad` section in the `.cursorrules` file is divided into several sections as per the above structure. Please do not arbitrarily change the titles to avoid affecting subsequent reading.
- Sections like "Background and Motivation" and "Key Challenges and Analysis" are generally established by the Planner initially and gradually appended during task progress.
- "Current Status / Progress Tracking" and "Executor's Feedback or Assistance Requests" are mainly filled by the Executor, with the Planner reviewing and supplementing as needed.
- "Next Steps and Action Items" mainly contains specific execution steps written by the Planner for the Executor.

## Workflow Guidelines

- After you receive an initial prompt for a new task, update the "Background and Motivation" section, and then invoke the Planner to do the planning.
- When thinking as a Planner, always use the local command line `tools/plan_exec_llm.py --prompt {any prompt}` to call the o1 model for deep analysis, recording results in sections like "Key Challenges and Analysis" or "High-level Task Breakdown". Also update the "Background and Motivation" section.
- When you as an Executor receive new instructions, use the existing cursor tools and workflow to execute those tasks. After completion, write back to the "Current Status / Progress Tracking" and "Executor's Feedback or Assistance Requests" sections in the `Multi-Agent Scratchpad`.
- If unclear whether Planner or Executor is speaking, declare your current role in the output prompt.
- Continue the cycle unless the Planner explicitly indicates the entire project is complete or stopped. Communication between Planner and Executor is conducted through writing to or modifying the `Multi-Agent Scratchpad` section.

Please note:

- Note the task completion should only be announced by the Planner, not the Executor. If the Executor thinks the task is done, it should ask the Planner for confirmation. Then the Planner needs to do some cross-checking.
- Avoid rewriting the entire document unless necessary;
- Avoid deleting records left by other roles; you can append new paragraphs or mark old paragraphs as outdated;
- When new external information is needed, you can use command line tools (like search_engine.py, llm_api.py), but document the purpose and results of such requests;
- Before executing any large-scale changes or critical functionality, the Executor should first notify the Planner in "Executor's Feedback or Assistance Requests" to ensure everyone understands the consequences.
- During you interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again.

## Tools

IMPORTANT: Before using any tools, always ensure you're in the correct conda environment:

```bash
conda activate gradiant
```

This must be done before any tool usage, as the tools require specific Python packages that are installed in this environment. Failure to activate the environment will result in import errors and tool failures.

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

IMPORTANT: Make better use of the available Python tools! Before diving into implementation, always try to:

1. Use search_engine.py to research solutions and best practices
2. Use web_scraper.py to gather detailed documentation
3. Use llm_api.py for complex analysis tasks
4. Combine tools for a better research workflow

Remember: These tools are here to help make better informed decisions. Use them proactively!

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

- Screenshot Capture:

```bash
tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

- LLM Verification with Images:

'''bash
python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
'''

Example workflow:

'''python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

## Take a screenshot

screenshot_path = take_screenshot_sync('<https://example.com>', 'screenshot.png')

## Verify with LLM

response = query_llm(
"What is the background color and title of this webpage?",
provider="openai", # or "anthropic"
image_path=screenshot_path
)
print(response)
'''

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:

'''bash
python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
'''

The LLM API supports multiple providers:

- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.

'''bash
python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
'''

This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.

'''bash
python ./tools/search_engine.py "your search keywords"
'''

This will output the search results in the following format:

'''bash
URL: <https://example.com>
Title: This is the title of the search result
Snippet: This is a snippet of the search result
'''

If needed, you can further use the `web_scraper.py` file to scrape the web page content.

## Lessons

### Core Lessons

- Use proper TypeScript types and interfaces for better type safety
- When adapting authentication systems, ensure proper session and user type compatibility
- Keep audit events consistent with the system's event types
- Handle rate limiting and security at the adapter level
- Implement proper error handling and audit logging
- Follow HIPAA compliance requirements for authentication and audit trails
- When searching for recent news, use the current year (2025) instead of previous years, or simply use the "recent" keyword to get the latest information
- Make better use of available Python tools for research and automation:
  - Use search_engine.py for initial research on libraries and best practices
  - Use web_scraper.py for gathering detailed documentation
  - Use llm_api.py for analyzing complex technical decisions
  - Combine tools for a more thorough research workflow
  - When running Python scripts that import from other local modules, use `PYTHONPATH=.` to ensure Python can find the modules. For example: `PYTHONPATH=. python tools/plan_exec_llm.py` instead of just `python tools/plan_exec_llm.py`. This is especially important when using relative imports.

### Recent Fixes

- Improved research workflow:

  - Started using search_engine.py more consistently
  - Combined search results with web_scraper.py for deeper analysis
  - Better utilization of Python toolkit for research tasks

### Best Practices

- Theme System Best Practices:

  - Use CSS variables for design tokens
  - Implement proper dark mode with system preference detection
  - Support high contrast mode for accessibility
  - Support reduced motion preferences
  - Use semantic color variables (e.g., --background, --foreground)
  - Implement smooth theme transitions
  - Ensure proper color contrast ratios
  - Use proper focus indicators
  - Handle system preferences changes
  - Persist theme preferences

- Use appropriate caching strategies for different data types
- Implement proper monitoring from the start
- Follow progressive enhancement principles
- Consider both vertical and horizontal scaling
- Use correct PostgreSQL system catalog views and column names for statistics gathering
- Properly handle table and index statistics for performance monitoring
- Use appropriate joins between system catalog tables for accurate metadata
- Always use pnpm for package management and running scripts (never npm or yarn)
- Follow markdown best practices when updating scratchpad:
  - Use proper heading hierarchy (h1 -> h2 -> h3)
  - Ensure consistent list indentation (2 or 4 spaces)
  - Add blank lines before and after lists and code blocks
  - Use backticks for inline code and triple backticks for code blocks
  - Check for markdown lint warnings and errors before committing changes
  - Maintain consistent bullet point style throughout the document

### Lessons 2

- Always verify protocol security requirements before implementation
- Use proper preprocessing phase management for MPC protocols
- Implement secure channel communication from the start
- Handle protocol-specific parameters carefully
- Document security assumptions and guarantees
- Test with multiple parties and security settings

## Multi-Agent Scratchpad for Blog Posts Task

### Background and Motivation

The user requested the creation of two new blog posts for the website: one about emotional intelligence in an AI-driven world and another about how AI can assist in improving mental health. These posts needed to be properly formatted according to the site's design and added to the blog list for visibility.

### Key Challenges and Analysis

1. Implementation Requirements:

   - Create well-researched, informative blog posts on the specified topics
   - Follow the site's existing blog post format and structure
   - Ensure proper frontmatter configuration for each post
   - Make the posts visible in the blog listing

2. Technical Approach:
   - Research current information on both topics using Python tools
   - Create properly formatted Markdown files in the blog content directory
   - Include all required frontmatter fields
   - Ensure the posts appear in the blog listing automatically

### Current Status / Progress Tracking

- Created two new blog posts:
  - "Emotional Intelligence in an AI-Driven World" (src/content/blog/emotional-intelligence-in-ai-world.md)
  - "How AI is Revolutionizing Mental Health Care" (src/content/blog/ai-mental-health-assistance.md)
- Used Python tools to research current information on both topics
- Properly formatted both posts with correct frontmatter including:
  - Title and description
  - Publication date
  - Table of contents enabled
  - Sharing enabled
  - OG image generation enabled
- Verified that blog posts are automatically included in the blog listing through the ListView component

### Executor's Feedback or Assistance Requests

The implementation is complete. Two well-researched blog posts have been created and added to the site:

1. "Emotional Intelligence in an AI-Driven World" explores:

   - The current state of emotional intelligence in an AI world
   - The paradox between AI's cognitive abilities and emotional limitations
   - Three key shifts in the AI-EQ relationship
   - Why emotional intelligence matters more in 2025
   - The path forward for integrating AI and EQ

2. "How AI is Revolutionizing Mental Health Care" covers:
   - The mental health crisis and AI solutions
   - Personal AI tools for mental wellness
   - Clinical applications of AI in mental healthcare
   - The integration of AI and human care
   - Challenges and ethical considerations
   - The future of AI in mental health

Both posts are properly formatted with all required frontmatter fields and will automatically appear in the blog listing through the site's content collection system. No additional configuration is needed as the ListView component automatically pulls posts from the blog collection.

### Next Steps and Action Items

- Task complete - no further actions required
- If adjustments are needed to the blog posts, they can be easily modified in their respective Markdown files
