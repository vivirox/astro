---
description: Cursor rules derived by SpecStory from the project AI interaction history
globs: *
---

---
description: Cursor rules derived by SpecStory from the project AI interaction history
globs: *
alwaysApply: false
---

## PROJECT OVERVIEW
Project: Astro.  A significant portion of the codebase consists of React and TypeScript components, requiring conversion to Astro's component model.  The analysis indicates a substantial conversion effort is needed to fully transition to an Astro-based architecture.  A recent codebase analysis (2025-03-31 17:53:45) estimates that 40-50% of components (primarily static UI, layout, and content-heavy components) could benefit from conversion to `.astro` format, while the remaining 50-60% (interactive components like chat, analytics, and admin dashboards) should remain as React components due to their interactive nature.  Further investigation is needed to precisely quantify the number of files requiring conversion.  A more detailed breakdown of the conversion effort is available in `astro-conversion-plan.mdx`.  A more detailed conversion plan is available in `astro-conversion-plan.mdx`.  A detailed conversion plan is available in `astro-conversion-plan.mdx`.  A further analysis on 2025-03-31 17:53:45 shows that approximately 25+ .astro files already exist within the project, primarily within the `src/pages` directory.  Additionally, at least one component (`Monitoring.astro`) is already in Astro format within the `src/components` directory. The project includes proper Astro configuration (`astro.config.mjs`).  A significant portion of the remaining components are within the `src/components/ui` directory, which contains many candidates for conversion to `.astro` format.  A further analysis (2025-03-31 17:53:45) indicates a significant portion of components (40-50%) are suitable for conversion to .astro format, while the remaining (50-60%) should remain as React components due to their interactive nature.  The conversion plan (`astro-conversion-plan.mdx`) details this further.  The project already contains approximately 25+ .astro files, primarily in `src/pages/`, and at least one component (`Monitoring.astro`) in `src/components/`.  A more recent analysis (2025-03-31 17:53:45) shows that approximately 40-50% of the components are suitable for conversion to .astro format, while the remaining 50-60% should remain as React components due to their interactive nature.  A more recent analysis (2025-03-31 17:53:45) indicates that approximately 40-50% of components are suitable for conversion to .astro format, while the remaining 50-60% should remain React components.  This analysis is detailed further in `astro-conversion-plan.mdx`.  A further analysis from 2025-03-31 17:53:45 indicates that approximately 40-50% of components are suitable for conversion to .astro format.  A further analysis (2025-03-31 17:53:45) confirms that approximately 40-50% of components are suitable for conversion to .astro format, while the remaining 50-60% should remain React components due to their interactive nature.  This is detailed in `astro-conversion-plan.mdx`.  A more recent analysis (2025-03-31 17:53:45) indicates that approximately 40-50% of components are suitable for conversion to .astro format. A further analysis from 2025-03-31 17:53:45 confirms that approximately 40-50% of components are suitable for conversion to .astro format, while the remaining 50-60% should remain React components due to their interactive nature.  This is detailed in `astro-conversion-plan.mdx`.
MainLayout.astro component created on 2025-03-31 22:59:59.
DashboardLayout.astro component updated on 2025-04-01.
MainLayout.astro uses UnoCSS.
DashboardLayout.astro uses UnoCSS.
DashboardLayout.astro component updated with ClientRouter, ErrorBoundary, improved responsiveness, meta tags, theme handling, transitions, accessibility features, and container class.  (2025-04-01)
DashboardLayout.astro component significantly improved on 2025-04-01: Added ClientRouter, ErrorBoundary, improved responsiveness, meta tags, theme handling with CSS variables, transitions, smoother theme changes, accessibility features (font fallbacks, dvh units), and container class.  Selection styling added.
ErrorBoundary component added (2025-04-01).
Convex integration prioritized on 2025-04-01.  React hooks for Convex functions created on 2025-04-01.
AdminDashboard.astro component updated on 2025-04-01: Import path for logging uses the alias path, metrics fetch moved to a separate API function (`getSystemMetrics`), error handling improved, and the client-side script is better organized.
BlogLayout.astro component added (2025-04-01).  Blog index page added (2025-04-01). Dynamic blog post route added (2025-04-01).


## CODE STYLE
Adhere to standard TypeScript coding conventions.  Avoid using the `any` type unless absolutely necessary and clearly documented. Use `unknown` instead of `any` where appropriate.

## FOLDER ORGANIZATION
Based on the project exploration, the following folders are identified: `src/pages`, `src/layouts`, `src/components`, `src/lib`, `src/config`, `src/constants`, `src/types`, `src/styles`, `src/hooks`, `src/scripts`, `src/data`, `src/workers`, `src/services`, `src/tests`, `src/context`, `src/@types`, `src/db`, `src/docs`, `src/assets`, `src/integrations`, `src/utils`, `src/simulator`, `src/content`.  Further refinement of folder organization may be needed based on project growth.  A new folder `src/hooks/convex` was added on 2025-04-01 to house Convex-specific React hooks.  A new folder `src/lib/api/admin` was added on 2025-04-01 to house admin-specific API functions.

## TECH STACK
TypeScript, ESLint, Jest, Vitest, Resend, Redis, ioredis, @testing-library/jest-dom, @testing-library/react, @postmark/core, ioredis, @ascorbic/feed-loader, react, react-dom, pnpm, Convex, Astro, class-variance-authority, UnoCSS, @astrojs/transitions, @astrojs/client

## PROJECT-SPECIFIC STANDARDS
- Unused variables and imports should be removed.  Address all ESLint warnings about unused code.  If a variable is declared but never used, remove it.  Use the underscore convention for unused parameters (e.g., `_key`).
- Vitest is the preferred testing framework for new tests. Jest should be used for existing tests until migration is complete.  A `vitest.config.ts` file should be created for Vitest configuration, and a Vitest setup file (e.g., `vitest.setup.ts`) is needed to declare Vitest globals for TypeScript projects.  The `jest.config.ts` and associated Jest setup file are deprecated for new tests.
- Proper configuration is required for both Jest (for existing tests) and Vitest (for new tests).  Ensure types are correctly configured for each.
- When mocking external services (like Redis or Resend) in tests, ensure proper type definitions are used to avoid linting errors. Direct access to underlying client methods might be necessary if the service class doesn't expose all required methods.  If direct access is needed, ensure proper mocking of the underlying client (e.g., `ioredis`) is implemented.
- When encountering type errors related to mocked services, consider using type assertions to match the expected type of the mocked function.  However, ensure this is done judiciously and only when necessary to avoid masking actual type problems.
- Ensure proper Jest type configuration for existing tests or migrate to Vitest for new tests.  Address all ESLint warnings about unused code.  If a variable is declared but never used, remove it.  Address all ESLint warnings, including those related to unused variables and imports.  Prioritize resolving critical issues such as redeclaration errors, unsafe optional chaining, undefined variables, and parsing errors before addressing less critical warnings.
- Ensure a `vitest.setup.ts` file exists to provide necessary test globals (e.g., `describe`, `it`, `expect`) for Vitest tests.  Missing test framework globals are a common source of errors.
- When encountering missing test framework globals (describe, it, expect, etc.) in Vitest tests, ensure that the `vitest.setup.ts` file is correctly configured and includes the necessary imports.  Commonly missing imports include `describe`, `it`, `expect`, `beforeAll`, `beforeEach`, `afterEach`, and `afterAll`.  The `vitest.setup.ts` file should also include a `declare global` block to make these globals available in test files.
- When importing modules, carefully check the export type (class vs. constant) to avoid import errors.  Correctly import modules based on their export type (e.g., `import { CacheInvalidation } from '@/lib/cache/invalidation'` instead of `import { CacheInvalidationService } from '@/lib/cache/invalidation'`).  Ensure that the import path correctly reflects the module's location.  Ensure that all necessary modules are imported, especially those from appropriate locations (e.g.,  `'@/lib/ai/services/PatternRecognitionService'`, `'@/lib/ai/services/PatternRecognitionService'`).
- When using `CacheInvalidation`, ensure that the `redis` property is passed as `{ redis: redis.getClient() }` to correctly access the Redis client.  The `initialize()` and `shutdown()` methods are not part of the `CacheInvalidation` interface and should not be used.  Use `JSON.stringify` for serializing values before storing them in Redis.  The `addTag` method is deprecated; use the `set()` method with the `tags` option to add tags to keys.  The `on` and `off` methods for event handling are not supported by `CacheInvalidation`. Direct verification of key existence should be used instead of event listeners.
- Ensure that the `vitest.setup.ts` file includes imports for `describe`, `it`, `expect`, `beforeAll`, `beforeEach`, `afterEach`, and `afterAll`, and a `declare global` block to make these globals available in test files.  Failure to include these can lead to missing test framework globals errors.  Correct import paths are crucial to avoid module import errors.  When updating tests to align with new service implementations, ensure that methods, parameters, and return types are correctly updated to match the current version.
- When encountering missing module imports, carefully check the module's location.  Incorrect import paths are a frequent source of errors.  For example, ensure that `'@/lib/ai/services/PatternRecognitionService'` is used correctly.
- Ensure proper type definitions for all RedisService methods and parameters.  Missing types are a common source of errors in Redis service integration tests.  Include necessary utility functions (e.g., `generateTestKey`, `sleep`) and custom matchers (e.g., `toBeRedisError`) for more robust testing.
- In Redis service integration tests, ensure proper type definitions for all methods and parameters. Import necessary utility functions (e.g., `generateTestKey`, `sleep`) from `test-utils` and add custom matchers (e.g., `toBeRedisError`) for more robust testing.  Ensure that `generateTestKey` and other necessary utility functions from `./test-utils` are imported into test files where needed.
- When encountering "is declared but its value is never read" errors, remove unused imports or use the underscore convention for unused parameters (e.g., `_key`).
- When using the `RedisService.set` method, ensure that TTL values are provided in milliseconds.  The method signature is `async set(key: string, value: string, ttlMs?: number): Promise<void>`.
- When using the `RedisService.set` method, ensure TTL values are provided in milliseconds. The method signature is `async set(key: string, value: string, ttlMs?: number): Promise<void>`.  Incorrectly providing TTL in seconds will result in a type error.  The correct usage is `await redis.set(key, value, ttl * 1000);` where `ttl` is in seconds.
- When using JSON.stringify, ensure the resulting string is of the correct type for Redis storage (e.g., string).
- To resolve the error "Object literal may only specify known properties, and 'globalTeardown' does not exist in type 'InlineConfig'", use a `vitest.global.setup.ts` file exporting both `setup` and `teardown` functions instead of separate `globalSetup` and `globalTeardown` properties in the Vitest configuration.
- For custom matchers in Vitest, use the `declare global` syntax as shown in the updated `test-utils.ts` example below.  This ensures correct type definitions and avoids linting errors.
- When encountering file not found errors, double-check the file path.  The error "Could not find file 'src/lib/services/redis.ts'. Did you mean one of: - src/lib/services/redis/index.ts - src/lib/services/redis/types.ts - src/lib/services/redis/RedisService.ts" indicates a potential issue with the file path or file organization.  Ensure the correct path is used and that the file exists in the specified location.  Correct import paths are crucial for resolving modules.  Ensure that the `tsconfig.json` file is correctly configured with `baseUrl` and `paths` to resolve relative imports correctly (e.g., `@/lib/redis`).  When encountering errors related to missing modules, double-check the import path. For example, ensure that `'@/lib/ai/services/PatternRecognitionService'` is used correctly.
- When using the logger, ensure proper instantiation, for example using `const logger = loggerModule.getLogger('NotificationService')`.
- Ensure proper closing tags for MDX `<Steps>` components.  Incorrect indentation can cause parsing errors.
- Ensure correct indentation for closing `</Steps>` tags in MDX files to avoid parsing errors.  Malformatted code blocks and duplicate lines in MDX files can also cause build errors.
- When encountering "Cannot find module '@/config/env.config'" errors, verify the `baseUrl` and `paths` configuration within `tsconfig.json` to ensure correct resolution of relative imports correctly.
- Avoid using JSX directly within TypeScript files.  Use `React.createElement` instead for better compatibility and type safety.  This is particularly important when working with Astro components.  The error "Unexpected token '<'" usually indicates this issue.  Ensure that all React imports are correctly handled.  For example, instead of `return <>{children}</>;`, use `return React.createElement(React.Fragment, null, children);`.  Avoid duplicate exports within the same file.  If multiple functions or variables share the same name, rename one of them to avoid naming conflicts.
- When encountering issues with React module resolution, ensure that Astro is correctly configured to handle React imports using either the `react` or `@astrojs/react` package.  Ensure that the necessary React packages are installed and configured correctly.
- When using JSX within Astro components, ensure that the necessary React packages are installed (`react`, `react-dom`) and that the component is correctly configured for JSX usage.  Incorrect configuration can result in runtime errors.  Ensure that the `astro.config.mjs` file is correctly configured to handle React imports.  Refer to the Astro documentation for guidance on configuring JSX within Astro projects. Use of `use client` directive in Astro components helps ensure proper hydration and prevents issues.
- Avoid using JSX directly within TypeScript files unless explicitly using `.tsx` file extension and configured correctly with `tsconfig.json` to handle JSX.  The error "Unexpected token '<'" usually indicates this issue.  Ensure that all React imports are correctly handled.  For example, instead of `return <>{children}</>;`, use `return React.createElement(React.Fragment, null, children);`.  Avoid duplicate exports within the same file.  If multiple functions or variables share the same name, rename one of them to avoid naming conflicts.
- Use `use client` directive in Astro components for proper hydration.
- To resolve persistent "module is not defined" errors related to React, create a custom React loader to manage the import and ensure compatibility between CommonJS and ESM modules. This custom loader will need to re-export the necessary React modules to ensure proper functionality. A custom `vite.config.js` might be necessary to configure Astro's build process for correct React import handling.  Review files in `src/pages` directory, specifically `index.astro`, for homepage issues. Review `src/layouts/BaseLayout.astro` and `src/layouts/StandardLayout.astro` for layout related problems. Investigate `src/components/widgets/SpinningGlobe.astro` for component-specific issues. Malformatted code blocks and duplicate lines in MDX files (like `src/content/docs/redis-testing.mdx`) can cause build errors and affect the homepage. Check for malformed code blocks and duplicate lines in MDX files. Review `src/simulator/index.tsx` for JSX usage within TypeScript. Use `React.createElement` instead. Check for duplicate exports in `src/simulator/utils/privacy.ts`. Rename duplicate exports to resolve conflicts. Ensure that `astro.config.mjs` is correctly formatted to avoid ESLint formatter issues resulting in empty output.  This may involve correcting indentation, spacing, or other style inconsistencies according to the ESLint configuration. When injecting scripts into Astro, avoid using import statements directly within the injected code. Use relative paths instead of aliases to ensure correct resolution during the build process.
- Ensure that `astro.config.mjs` is correctly configured to handle React imports. Address "module is not defined" errors by configuring Astro to handle React imports correctly, potentially using a custom Vite configuration or a custom React loader. The error typically indicates a mismatch between the module system used by React and the project's module system. Ensure that the correct version of React is installed and that the necessary dependencies are included. Use the `use client` directive in Astro components to ensure proper React hydration.  Avoid using JSX directly within TypeScript files unless explicitly using `.tsx` file extension and configured correctly with `tsconfig.json` to handle JSX. Use `React.createElement` instead for better type safety and compatibility.
- Ensure that settings.json uses boolean values for boolean properties.  The `window.commandCenter` property should be `true` or `false`, not a number.
- The `functions` field in `convex.json` should be a string pointing to the directory containing Convex functions (e.g., `"functions": "convex/"`).  Do not use an object.
- A large portion of the project's components are implemented using React and TypeScript.  A significant conversion effort will be required to migrate these to Astro components.  A recent analysis (2025-03-31 17:53:45) suggests a phased approach, prioritizing static and layout components for conversion while retaining interactive components as React components within Astro pages using client-side directives.
- When using MDX, ensure that link fragments in the Table of Contents accurately reflect the section headers.  Spaces in headers should be replaced with hyphens, and ampersands should be replaced with "and".
- When using MDX, ensure that link fragments in the Table of Contents accurately reflect the section headers. Replace spaces in headers with hyphens, and replace ampersands with "and".  Link fragments should be lowercase and use hyphens instead of spaces.  Link fragments in MDX files must exactly match the corresponding section headers. Replace spaces with hyphens and ampersands with "and". All fragments should be lowercase.  Link fragments should be valid.  Link fragments in the Table of Contents must exactly match the corresponding section headers in MDX files.  Spaces should be replaced with hyphens, ampersands with "and", and all fragments should be lowercase.  Link fragments in the Table of Contents should be lowercase and use hyphens instead of spaces.  Ampersands should be replaced with "and".  Link fragments in the Table of Contents must exactly match the corresponding section headers in MDX files. Spaces should be replaced with hyphens, ampersands with "and", and all fragments should be lowercase.
- Link fragments in the Table of Contents should match the corresponding section headers exactly, with spaces replaced by hyphens, ampersands replaced by "and", and all lowercase.  Ensure that link fragments in the Table of Contents exactly match the corresponding section headers in MDX files.  Spaces should be replaced with hyphens, ampersands with "and", and all fragments should be lowercase.
- MainLayout.astro file added to `src/layouts` directory on 2025-03-31 22:59:59.
- DashboardLayout.astro file updated on 2025-04-01.  The file uses `ClientRouter` instead of the deprecated `ViewTransitions`.  The `Header` and `Footer` components are now correctly included and used within the layout.  The DashboardLayout now uses UnoCSS for styling.  Error handling improved with the addition of an `ErrorBoundary` component. Meta tags added for SEO optimization.  Improved theme handling with CSS variables.  Transitions added for smoother theme changes. Accessibility improved with font fallbacks. Viewport height handling improved using `dvh` units. Container class added for better content width management. Selection styling added.
- The `ViewTransitions` component is deprecated; use `ClientRouter` instead.
- The `Header` and `Footer` components should be used in `DashboardLayout.astro` instead of inline HTML.  The inline mobile sidebar toggle script should be removed as this functionality is handled within the `Sidebar` component.
- Case sensitivity in type imports should be checked.  The error "Property 'theme' does not exist on type 'Ui'" was caused by importing `Ui` as `UI`. Correct case is crucial for proper type resolution.  Ensure that all imports and type references use the correct casing.
- The `Ui` interface in `src/types.ts` now includes `theme` and `nav` properties as of 2025-03-31 23:34:51.  The `UI` object in `src/config.ts` has been updated to reflect these changes.
-  A new `ErrorBoundary` component has been added to handle errors gracefully within the `DashboardLayout.astro` component (2025-04-01).
-  A new Astro component test helper (`renderAstro`) and mock Astro global creator (`createMockAstro`) functions have been added to `src/test/utils/astro.ts` (2025-04-01).
-  New Convex functions and React hooks created on 2025-04-01.
- AdminDashboard.astro updated on 2025-04-01: Import path for logging uses alias path (`@/`), metrics fetch moved to separate API function (`getSystemMetrics`), error handling improved, client-side script better organized.  A new `getSystemMetrics` function was added to `src/lib/api/admin.ts` to handle fetching system metrics.
- The `id` property in blog posts is deprecated; use `slug` instead. (2025-04-01)  Conflict:  The new blog post implementation uses `id`.  Further clarification needed on whether to use `id` or `slug`.  The current implementation uses `id` for the blog post slug.  A decision is needed on whether to change this to `slug`.


## WORKFLOW & RELEASE RULES
- Prioritize completing the DashboardLayout.astro component before moving to other tasks. (2025-04-01)
- Prioritize setting up the testing infrastructure before proceeding with other tasks (2025-04-01).
- Prioritize completing Convex integration next. (2025-04-01)
- Prioritize creating React hooks for Convex functions after completing the Convex integration. (2025-04-01)
- The Astro conversion plan should be updated to reflect the progress made on the AdminDashboard.astro component and the creation of the `getSystemMetrics` API function. (2025-04-01)
- Prioritize blog layout and content collection setup. (2025-04-01)


## REFERENCE EXAMPLES
**Example Vitest Setup File (vitest.setup.ts):**

```typescript
import '@testing-library/jest-dom'
import { expect, afterEach, describe, it, beforeAll, beforeEach, afterAll } from 'vitest'
import { cleanup } from '@testing-library/react'
import matchers from '@testing-library/jest-dom/matchers'

// Extend Vitest's expect with @testing-library/jest-dom's matchers
expect.extend(matchers)

// Clean up after each test
afterEach(() => {
  cleanup()
})

// Make test globals available
declare global {
  // eslint-disable-next-line no-var
  var describe: typeof import('vitest')['describe']
  // eslint-disable-next-line no-var
  var it: typeof import('vitest')['it']
  // eslint-disable-next-line no-var
  var expect: typeof import('vitest')['expect']
  // eslint-disable-next-line no-var
  var beforeAll: typeof import('vitest')['beforeAll']
  // eslint-disable-next-line no-var
  var afterAll: typeof import('vitest')['afterAll']
  // eslint-disable-next-line no-var
  var beforeEach: typeof import('vitest')['beforeEach']
  // eslint-disable-next-line no-var
  var afterEach: typeof import('vitest')['afterEach']
}
```

**Example Jest Setup File (setupTests.ts):**  *(Deprecated for new tests)*

```typescript
import '@testing-library/jest-dom';

// Make Jest available globally
declare global {
  // eslint-disable-next-line no-var
  var jest: typeof import('@jest/globals')['jest'];
  // eslint-disable-next-line no-var
  var describe: typeof import('@jest/globals')['describe'];
  // eslint-disable-next-line no-var
  var it: typeof import('@jest/globals')['it'];
  // eslint-disable-next-line no-var
  var expect: typeof import('@jest/globals')['expect'];
  // eslint-disable-next-line no-var
  var beforeAll: typeof import('@jest/globals')['beforeAll'];
  // eslint-disable-next-line no-var
  var afterAll: typeof import('@jest/globals')['afterAll'];
  // eslint-disable-next-line no-var
  var beforeEach: typeof import('@jest/globals')['beforeEach'];
  // eslint-disable-next-line no-var
  var afterEach: typeof import('@jest/globals')['afterEach'];
}
```

**Example Vitest Global Setup File (vitest.global.setup.ts):**

```typescript
export async function setup() {
  // Your setup code here
}

export async function teardown() {
  // Your teardown code here
}
```

**Example test-utils.ts (updated for Vitest custom matchers):**

```typescript
import { RedisServiceError, RedisErrorCode } from '../types';
import { expect, vi } from 'vitest';

declare global {
  namespace Vi {
    interface Assertion {
      toBeRedisError(expectedCode: RedisErrorCode): void;
      toBeInRedis(expectedValue: unknown): Promise<void>;
      toExistInRedis(): Promise<void>;
      toHaveTTL(expectedTTL: number): Promise<void>;
    }
  }
}

export const generateTestKey = () => `test:${Date.now()}`;
export const sleep = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms));

```

**Example Custom React Loader (src/lib/utils/react-loader.ts):**

```typescript
import * as React from 'react';
import * as ReactDOM from 'react-dom';
import * as ReactDOMClient from 'react-dom/client';

export { React, ReactDOM, ReactDOMClient };
export default React;
```

**Example ESM Compatibility Wrapper for React (src/lib/esm-compat/react.js):**

```javascript
// ESM compatibility wrapper for React
import React from 'react';
export default React;
export const {
  useState,
  useEffect,
  useContext,
  useReducer,
  useCallback,
  useMemo,
  useRef,
  useLayoutEffect,
  useImperativeHandle,
  useDebugValue,
  createContext,
  createElement,
  cloneElement,
  createRef,
  isValidElement,
  Children,
  Fragment,
  StrictMode,
  Suspense,
  lazy,
  Component,
  PureComponent,
  memo,
  forwardRef,
} = React;
```

**Example ESM Compatibility Wrapper for ReactDOM (src/lib/esm-compat/react-dom.js):**

```javascript
// ESM compatibility wrapper for React DOM
import ReactDOM from 'react-dom';
export default ReactDOM;
export const {
  render,
  hydrate,
  unmountComponentAtNode,
  findDOMNode,
  createPortal,
  flushSync,
  unstable_batchedUpdates,
  version,
} = ReactDOM;
```

**Example ESM Compatibility Wrapper for ReactDOMClient (src/lib/esm-compat/react-dom-client.js):**

```javascript
// Patched version of ReactDOM Client for ESM compatibility
import * as ReactDOM from 'react-dom';
import * as ReactDOMClient from 'react-dom/client';

export default ReactDOMClient;

// Re-export client specific methods
export const { 
  createRoot, 
  hydrateRoot 
} = ReactDOMClient;
```

**Example Patched React (./.patches/react.js):**

```javascript
// Patched version of React for ESM compatibility
import * as React from 'react';

// Default export
export default React;
```

**Example Patched ReactDOM (./.patches/react-dom.js):**

```javascript
// Patched version of ReactDOM for ESM compatibility
import * as ReactDOM from 'react-dom';

// Default export
export default ReactDOM;
```

**Example Patched ReactDOMClient (./.patches/react-dom-client.js):**

```javascript
// Patched version of ReactDOM Client for ESM compatibility
import * as ReactDOM from 'react-dom';
import * as ReactDOMClient from 'react-dom/client';

export default ReactDOMClient;

// Re-export client specific methods
export const { 
  createRoot, 
  hydrateRoot 
} = ReactDOMClient;
```

**Example Custom Vite Module Transform Plugin (src/lib/vite/module-transform.js):**

```javascript
/**
 * Vite plugin to help with ESM/CommonJS interoperability issues
 */
export function modulesTransformPlugin() {
  return {
    name: 'vite-plugin-module-transform',
    enforce: 'pre',

    // Transform CommonJS to ESM
    transform(code, id) {
      // Handle only specific files that cause issues
      if (
        id.includes('node_modules/react/index.js') ||
        id.includes('node_modules/react-dom/index.js')
      ) {
        // Replace CommonJS export with ESM export
        let transformed = code.replace(
          /module\.exports\s*=\s*require\(['"](mdc:.*)['"]\)/g,
          "import * as _temp from '$1'; export default _temp.default || _temp;"
        );

        // Replace other CommonJS patterns
        transformed = transformed.replace(
          /require\(['"](mdc:.*)['"]\)/g,
          "await import('$1').then(m => m.default || m)"
        );

        return {
          code: transformed,
          map: null
        };
      }

      return null;
    },

    // Handle virtual modules
    resolveId(id) {
      if (id === 'virtual:react-compat') {
        return '\0react-compat';
      }
      return null;
    },

    // Load virtual modules
    load(id) {
      if (id === '\0react-compat') {
        return `
          import * as React from 'react';
          export default React;
          export const {
            useState,
            useEffect,
            useContext,
            useReducer,
            useCallback,
            useMemo,
            useRef,
            useLayoutEffect,
            createElement,
            Fragment,
            Component,
          } = React;
        `;
      }
      return null;
    }
  };
}

```

**Example Custom React Integration (src/integrations/react/index.js):**

```javascript
import nodeAdapter from './server.js';
import v17ServerAdapter from './server-v17.js';

/**
 * For integration with Astro components using React components
 * Modified version to handle ESM compatibility issues
 */
export default function createReactIntegration() {
  return {
    name: '@astrojs/react',
    hooks: {
      'astro:config:setup': ({ addRenderer }) => {
        addRenderer({
          name: '@astrojs/react',
          serverEntrypoint: hasReactV18() && !needsV17Patch()
            ? './src/integrations/react/server.js'
            : './src/integrations/react/server-v17.js',
          clientEntrypoint: hasReactV18() && !needsV17Patch()
            ? './src/integrations/react/client.js'
            : './src/integrations/react/client-v17.js',
          jsxImportSource: 'react',
          jsxTransformOptions: async () => {
            return {
              jsx: 'react/jsx-runtime',
              development: process.env.NODE_ENV !== 'production',
            };
          },
        });
      },
    },
  };
}

/**
 * Client-side version detection utility
 */
function hasReactV18() {
  try {
    // Check if we can access React 18 APIs
    const React = require('react');
    return !!React.useId;
  } catch (e) {
    return false;
  }
}

/**
 * Detect if we need compatibility patches
 */
function needsV17Patch() {
  try {
    // Try to access ReactDOM.createRoot - existence indicates React 18
    const ReactDOM = require('react-dom');
    return !ReactDOM.createRoot;
  } catch (e) {
    return false;
  }
}

```


## PROJECT DOCUMENTATION & CONTEXT SYSTEM
- The conversion plan (`astro-conversion-plan.mdx`) should be updated to reflect the progress made on the DashboardLayout.astro component. (2025-04-01)
- The `astro-conversion-plan.mdx` file should be updated to reflect the completion of the DashboardLayout.astro component and the creation of the ErrorBoundary component. (2025-04-01)
- The conversion plan should be updated to reflect the progress made on Convex integration and the creation of React hooks for Convex functions. (2025-04-01)
- The AdminDashboard.astro component documentation should be updated to reflect the changes made on 2025-04-01. (2025-04-01)
- The `astro-conversion-plan.mdx` file should be updated to reflect the improvements made to the `AdminDashboard.astro` component on 2025