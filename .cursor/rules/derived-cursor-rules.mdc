---
description: Cursor rules derived by SpecStory from the project AI interaction history
globs: *
---

# Cursor Development Rules & AI Collaboration Guide for Astro/TypeScript

## �� Core Philosophy

1.  **Simplicity:** Prioritize simple, clear, and maintainable solutions. Avoid unnecessary complexity or over-engineering.
        *   `docs/technical.md` (Technical specifications, established patterns)
        *   `tasks/tasks.md` (Current development tasks, requirements)
        *   `astro.config.mjs` (Astro configuration and integrations)
        *   `tsconfig.json` (TypeScript configuration)
    *   If documentation is missing, unclear, or conflicts with the request, **ask for clarification**.
2.  **Architecture Adherence:**
    *   Follow Astro's recommended project structure:
        *   `src/pages/` for file-based routing
        *   `src/components/` for reusable components
        *   `src/layouts/` for page layouts
        *   `src/content/` for content collections
        *   `src/styles/` for global styles
        *   `public/` for static assets
    *   Understand and respect module boundaries, data flow, system interfaces, and component dependencies.
    *   Validate that changes comply with established architecture and Astro's best practices.
3.  **Pattern & Tech Stack Awareness:**
    *   Reference project documentation to understand existing patterns and technologies.
    *   Utilize Astro's built-in features and official integrations before adding external dependencies.

## ⚙️ Task Execution & Workflow
- Prioritize completing the DashboardLayout.astro component before moving to other tasks. (2025-04-01)
- Prioritize setting up the testing infrastructure before proceeding with other tasks (2025-04-01).
- Prioritize completing Convex integration next. (2025-04-01)
- Prioritize creating React hooks for Convex functions after completing the Convex integration. (2025-04-01)
- The Astro conversion plan should be updated to reflect the progress made on the AdminDashboard.astro component and the creation of the `getSystemMetrics` API function. (2025-04-01)
- Prioritize blog layout and content collection setup. (2025-04-01)
- Prioritize creating the Documentation layout next. (2025-04-02)
- DocumentationLayout.astro component created (2025-04-02).
- Progress Update (2025-04-03): Documentation Layout Implementation (COMPLETED). Overall progress at 89% completion.  Next steps prioritized. Layouts and homepage updated to reflect the new theme from the 'antfu' submodule. Integrated the Antfu theme layouts (BaseLayout, StandardLayout, MainLayout, etc.) and updated the homepage (`index.astro`) to match the new theme structure. Integrated the Antfu theme layouts (BaseLayout, StandardLayout, MainLayout, etc.) and updated the homepage (`index.astro`) to match the new theme structure.
- Progress Update (2025-04-04): Fixed Invalid Imports (COMPLETED) - Removed invalid imports for `ClientRouter` and `ViewTransitions` from `astro:transitions` which were causing "Cannot find module" errors in the layouts. The project should properly install `@astrojs/transitions` if these features are needed.  DocumentationLayout.astro component created (2025-04-04). Added sample documentation pages (getting-started and API reference).
- Progress Update (2025-04-05): Converted PerformanceDashboard component to Astro.
- Implement real user monitoring (RUM): Research available RUM tools compatible with Astro; Create a basic RUM implementation; Set up performance metrics collection; Implement error tracking; Create a dashboard to visualize collected data; Add documentation on how to use and interpret RUM data. (2025-04-02)
- Implement Real User Monitoring (RUM) (2025-04-02):  This task involved researching RUM tools, creating a basic implementation, setting up performance metrics collection, implementing error tracking, creating a dashboard to visualize data, and adding documentation.  The `RealUserMonitoring.astro` component and associated React hooks were created. A new page `/admin/real-user-monitoring` was created to display the RUM data.
- Focus on fixing Astro components with incorrect frontmatter structure, specifically `PatternVisualization.astro` and `PerformanceDashboard.astro`. (2025-04-02)
- Fix the JSON examples in `src/pages/docs/api/index.astro` to avoid conflicts with Astro's templating syntax. (2025-04-02)
- Focus on fixing frontmatter issues in `PatternVisualization.astro` and `PerformanceDashboard.astro`. (2025-04-02)
- Check for any remaining analytics components to convert (2025-04-02)
- Implement API versioning and documentation (2025-04-02)
- Set up server-side auth checks for improved security (2025-04-02)
- Update the conversion plan to reflect the completion of the SimulatorDashboard conversion. (2025-04-02)
- Convert SimulatorDashboard component to Astro wrapper (2025-04-06)
- Add mobile device tests for responsive layouts (2025-04-06)
- Convert SimulatorDashboard component to an Astro wrapper (2025-04-02)
- Add mobile device tests for responsive layouts (2025-04-02)
- Convert SimulatorDashboard component to an Astro wrapper (2025-04-02)
- Convert SimulatorDashboard component to an Astro wrapper (2025-04-02)
- Convert SimulatorDashboard component to an Astro wrapper (2025-04-02)
- Convert SimulatorDashboard component to an Astro wrapper (2025-04-02)
- Update conversion plan with progress (2025-04-02)
- Address linting errors related to improper imports from `@axe-core/react`, incorrect rendering of Astro components, and type errors in fetch mocks. (2025-04-02)
-  To address linting errors related to improper imports from `@axe-core/react`, a helper function `renderAstroComponent` was created to render Astro components within tests.  The `@axe-core/react` imports were revised. Type errors in fetch mocks were resolved by ensuring a complete `Response` object was returned. (2025-04-02)
- Progress Update (2025-04-06): SimulatorDashboard Conversion (COMPLETED) - Created SimulatorDashboard.astro wrapper component with proper frontmatter structure and client:load directive. Created SimulatorDashboardReact.tsx as the actual implementation. Added comprehensive tests for the components. Mobile Device Tests (COMPLETED) - Implemented Playwright-based mobile device compatibility tests for various screen sizes and orientations. Tested core pages including home, documentation, dashboard, and simulator. Added screenshot generation for visual verification. Overall Progress - Project now at 95% completion with all dashboard components converted to Astro format and significant progress on testing infrastructure.
- Progress Update (2025-04-07): Cross-Browser Compatibility Tests (COMPLETED) - Created comprehensive cross-browser tests using Playwright to ensure the application works correctly across Chromium, Firefox, and WebKit browsers. Added tests for page functionality, responsive behavior, form interactions, and animations.
- Progress Update (2025-04-08): API Versioning and Documentation (COMPLETED) - Implemented API versioning through URL paths (e.g., /api/v1/...) with automatic redirects from legacy endpoints. Created OpenAPI specification and Swagger UI documentation for interactive API testing. Updated API documentation with version history and guidelines. Overall Progress - Project now at 98% completion with all dashboard components converted to Astro format, complete testing infrastructure, and properly versioned API endpoints.
- Progress Update (2025-04-09): Server-Side Auth Implementation (COMPLETED) - Implemented enhanced server-side authentication checks with strict token validation, rate limiting, IP verification, user agent monitoring, role-based access control, and comprehensive audit logging. Created secure API endpoints using the new auth middleware. Added comprehensive tests for the server-side auth system. Created implementation documentation for server-side auth. Overall progress: 99% complete.
- Update conversion plan with progress (2025-04-02)
- Address type mismatch in `src/pages/api/v1/admin/users.ts` between `protectRoute` and `APIRoute`.  Using `@ts-ignore` as a temporary workaround. (2025-04-11)
- Address incomplete conditional logic and type errors in files as needed. (2025-04-02)
- Address linting errors related to the `createAuditLog` function and its usage across multiple files.  (2025-04-02)  A new `AIErrorContext` interface was added to improve type safety in error handling. (2025-04-02)
- Resolved type mismatch in `src/components/MentalHealthInsights.tsx` by creating `EnhancedMentalHealthAnalysis` interface extending `MentalHealthAnalysis` and adding properties for UI display.  Conditional rendering implemented to handle missing properties. (2025-04-02)
- Update the conversion plan to reflect the progress made so far. (2025-04-02)
- Update conversion plan with progress (2025-04-02)
- Progress Update (2025-04-12): Type mismatch between protectRoute and APIRoute resolved.  New type definitions created in `src/lib/auth/apiRouteTypes.ts`.  Documentation updated. Added `src/pages/404.astro` and `src/pages/500.astro` for custom error handling. Added `src/styles/custom.css` for Starlight theme customization. Updated `astro.config.mjs` to include `errorPage: '404.astro'` and `disable404Route: true` for Starlight.
- Progress Update (2025-04-12): Astro conversion plan updated to reflect 99.75% completion. All dashboard components converted, testing infrastructure complete, API endpoints versioned, server-side auth implemented, and protectRoute type issues resolved.
- Progress Update (2025-04-04): DocumentationLayout.astro component created (2025-04-04). Added sample documentation pages (getting-started and API reference).
- Progress Update (2025-04-05): Converted PerformanceDashboard component to Astro.
- RealUserMonitoring.astro component created (2025-04-02).  A new page `/admin/real-user-monitoring` was added to display the RUM dashboard. (2025-04-02)
- SimulatorDashboard.astro component created (2025-04-02).
- Progress Update (2025-04-06): SimulatorDashboard Conversion (COMPLETED) - Created SimulatorDashboard.astro wrapper component with proper frontmatter structure and client:load directive. Created SimulatorDashboardReact.tsx as the actual implementation. Added comprehensive tests for the components. Mobile Device Tests (COMPLETED) - Implemented Playwright-based mobile device compatibility tests for various screen sizes and orientations. Tested core pages including home, documentation, dashboard, and simulator. Added screenshot generation for visual verification. Overall Progress - Project now at 95% completion with all dashboard components converted to Astro format and significant progress on testing infrastructure.
- Progress Update (2025-04-07): Cross-Browser Compatibility Tests (COMPLETED) - Created comprehensive cross-browser tests using Playwright to ensure the application works correctly across Chromium, Firefox, and WebKit browsers. Added tests for page functionality, responsive behavior, form interactions, and animations.
- Progress Update (2025-04-08): API Versioning and Documentation (COMPLETED) - Implemented API versioning through URL paths (e.g., /api/v1/...) with automatic redirects from legacy endpoints. Created OpenAPI specification and Swagger UI documentation for interactive API testing. Updated API documentation with version history and guidelines. Overall Progress - Project now at 98% completion with all dashboard components converted to Astro format, complete testing infrastructure, and properly versioned API endpoints.
- Progress Update (2025-04-09): Server-Side Auth Implementation (COMPLETED) - Implemented enhanced server-side authentication checks with strict token validation, rate limiting, IP verification, user agent monitoring, role-based access control, and comprehensive audit logging. Created secure API endpoints using the new auth middleware. Added comprehensive tests for the server-side auth system. Created implementation documentation for server-side auth. Overall progress: 99% complete.
- Progress Update (2025-04-12): Astro conversion plan updated to reflect 99.9% completion. All pages converted to Astro format.  Tests added for SearchDemo.astro, MentalHealthChatDemo.astro, AIChat.astro, and Button.astro. Added `src/pages/custom-404.astro` to handle custom 404 errors.
- Progress Update (2025-04-12): Astro conversion plan updated to reflect 100% completion. Convex integration at 98% complete. Authentication at 100% complete. Testing and Validation at 99.5% complete.
- In `register.astro`, use `Astro.url.searchParams.get('error')` to access query parameters. (2025-04-02)
- Ensure proper nesting of form elements in `register.astro` to avoid structural issues. (2025-04-02)
- Update the conversion plan to reflect progress. (2025-04-02)
- Add tests for remaining Astro components (2025-04-02).
- Implement view transitions using the native `astro:transitions` API (2025-04-02).
- Investigate root cause of null byte issues (2025-04-02).
- Progress Update (2025-04-12): Astro conversion plan updated to reflect 99.9% completion. All pages converted to Astro format.  Tests added for SearchDemo.astro, MentalHealthChatDemo.astro, AIChat.astro, and Button.astro.
- Progress Update (2025-04-12): Astro conversion plan updated to reflect 100% completion. Convex integration at 98% complete. Authentication at 100% complete. Testing and Validation at 99.5% complete.
- Rule: astro (added 2025-04-02)
- Create a detailed production readiness plan in `production-readiness-plan.mdx`. (2025-04-02)
- Production Readiness Plan (COMPLETED) - Created comprehensive production readiness plan (production-readiness-plan.mdx) with detailed steps for preparing the application for launch. Plan includes security hardening, performance optimization, monitoring setup, testing requirements, CI/CD finalization, technical debt resolution, documentation, training, and launch preparation steps. (2025-04-02)
- Null Byte Issues Resolution (COMPLETED) - Fixed null byte issues in components like FHEDemo.astro and AdminLayout.astro by refactoring React components to use className instead of class attributes and adding proper TypeScript type definitions. Removed the custom build-clean.js script as it's no longer needed. (2025-04-02)
- Overall Progress - Project now at 85% production readiness with all components properly converted to Astro format, complete testing infrastructure, properly versioned API endpoints, enhanced security controls, and resolved build issues. Need to complete items in the production readiness plan before launch. (2025-04-02)
- Add login functionality: Added login and dashboard access buttons to the homepage (`/pages/index.astro`). Added login link to `/pages/index.astro` navigation. (2025-04-02)
- To resolve Astro build warnings about unsupported YAML files, prefix YAML filenames with an underscore (e.g., `_openapi.yaml`). This applies to OpenAPI specification files used by Swagger UI.  This ensures that Astro ignores these files during the build process while still allowing them to be served as static assets. (2025-04-02)
- Resolved duplicate declaration of `getBrowser` in `src/middleware.ts`. (2025-04-02)
- Layouts and homepage updated to reflect the new theme from the 'antfu' submodule. (2025-04-03)
- Integrated the Antfu theme layouts (BaseLayout, StandardLayout, MainLayout, etc.) and updated the homepage (`index.astro`) to match the new theme structure. (2025-04-03)
- Antfu Theme Integration (2025-04-03):  Integrated the Antfu theme layouts (BaseLayout, StandardLayout, MainLayout, etc.) and updated the homepage (`index.astro`) to match the new theme structure.
- Homepage and Layout Update (2025-04-02): Updated the homepage (`index.astro`) and layouts (`BaseLayout.astro`, `StandardLayout.astro`, `MainLayout.astro`) to integrate the Antfu theme.  This involved updating import paths, component structures, and adding new configuration options for the theme.
- Antfu Theme Integration (2025-04-03): Successfully integrated the Antfu theme layouts (BaseLayout, StandardLayout, MainLayout, etc.) and updated the homepage (`index.astro`) to match the new theme structure.  This involved updating import paths, component structures, and adding new configuration options for the theme.  The navigation bar was updated to include the logo in the top-left and navigation links in the top-right, consistent with the antfu template.  The homepage (`index.astro`) was updated to use the new layout structure.
- Progress Update (2025-04-12):  Homepage and navigation updated to match antfu template.  Logo is now a proper gradient image, and the navigation links are correctly displayed.  The unnecessary title under the spinning globe has been removed. (2025-04-13)
- Homepage and Navigation Update (2025-04-13): Updated homepage and navigation to match antfu template.  Logo is now a gradient image, navigation links are correctly displayed, and unnecessary title under spinning globe removed.
- Top-left logo updated to a graphical image instead of plain font. (2025-04-03)
- Created `public/images/gradiant-ascent.svg`  (2025-04-03) -  SVG logo created with gradient text "Gradiant Ascent".  Uses 'Great Vibes', 'Dancing Script' fonts with drop shadow and glow filter.
- Created `public/images/gradiant-ascent.svg` (2025-04-03):  Final SVG logo implementation using hand-drawn paths.  Includes gradient, stroke width, and glow effect.
- Created `public/images/gradiant-ascent.svg` (2025-04-03): Final SVG logo implementation.  Hand-drawn paths, gradient, stroke width, and glow effect.  This replaces previous SVG attempts.
- Created `public/images/gradiant-ascent.png` (2025-04-03):  A PNG version of the logo was created.
- Updated Logo in `src/components/widgets/LogoButton.astro` (2025-04-03):  The logo was updated to use a gradient SVG instead of text.  The font `Dancing Script` was used, with a gradient background, text-shadow, and drop-shadow for a glow effect.  The font size was increased to 2.2rem. Responsive sizing was added for mobile screens.  Google Fonts were added for the `Dancing Script` font.
- Updated Logo in `src/components/widgets/LogoButton.astro` (2025-04-13): The logo was updated to use a hand-drawn SVG with a pink-to-purple gradient,  'Great Vibes' font, and a glow effect.
- Updated Logo in `src/components/widgets/LogoButton.astro` (2025-04-13): The logo was updated to use the SVG from the Antfu theme.
- Updated Logo in `src/components/widgets/LogoButton.astro` (2025-04-13): The logo is now the SVG from the Antfu theme.


## ✨ Code Quality & Style

1.  **TypeScript Guidelines:**
    *   Use strict typing (avoid `any`). Document complex logic with JSDoc.
    *   Leverage TypeScript's type inference where appropriate.
    *   Define proper interfaces for component props.
    *   Use type guards for runtime type checking.
    *   Use `unknown` instead of `any` where appropriate.
2.  **Astro Component Guidelines:**
    *   Use `.astro` files for static or minimally interactive components.
    *   Keep React/Vue/Svelte components only for highly interactive features.
    *   Use client directives (`client:load`, `client:idle`, `client:visible`) judiciously.
    *   Implement proper prop validation using TypeScript interfaces.
    *   Use the `use client` directive for proper hydration in Astro components.
    *   **CRITICAL**: Always verify frontmatter syntax is correct in every `.astro` file - this is the most common source of errors.
    *   **IMPORTANT**: Always use proper Astro frontmatter syntax (content between `---` fences) for imports, props, and scripts.  Ensure that the frontmatter is correctly formatted and that the closing `---` is present.
    *   Correct Astro file structure has three parts:
        1. Frontmatter section between `---` fences containing imports, TypeScript definitions, and JavaScript logic
        1. HTML template section after the closing `---`
        1. Optional `<style>` section at the bottom
    *   Variables defined in the frontmatter section are available in the template.
    *   After creating or editing `.astro` files, verify that frontmatter sections are properly defined.
    *   **Common Errors to Check for:**
        - Missing or improper frontmatter fences (`---` at beginning and end of frontmatter)
        - Incorrect imports (verify if the imported module uses default or named exports)
        - Type import errors (ensure correct type paths and imports)
        - Undefined variable errors for props and imported components in templates
        - Imports from non-existent modules (especially common with transitions)
    *   Example of correct structure:
      ```astro
      ---
      // Imports and TypeScript in frontmatter section
      import MyComponent from './MyComponent';
      import type { MyProps } from './types';
      
      // Props interface
      interface Props {
        title: string;
        items?: string[];
      }
      
      // Props destructuring
      const { title, items = [] } = Astro.props;
      
      // Any other JS logic
      const count = items.length;
      ---
      
      <!-- HTML template section -->
      <div>
        <h1>{title}</h1>
        <p>Item count: {count}</p>
        <ul>
          {items.map(item => <li>{item}</li>)}
        </ul>
      </div>
      
      <!-- Optional style section -->
      <style>
        h1 { color: blue; }
      </style>
      ```
3. **Astro Transitions Guidelines:**
    * **IMPORTANT**: Use `astro:transitions` instead of the now-deprecated `@astrojs/transitions` package:
      * Imports should use `import { ... } from 'astro:transitions'` syntax
      * Do NOT add `@astrojs/transitions` as a dependency or integration
    * Use `ClientRouter` instead of `ViewTransitions` for routing:
      ```astro
      ---
      import { ClientRouter } from 'astro:transitions';
      ---
      <ClientRouter />
      ```
    * When applying transition names, use the `transition:name` directive:
      ```astro
      <img src={item.image} transition:name={`image-${item.id}`} />
      ```
    * For animation customization, use the `transition:animate` directive:
      ```astro
      <main transition:animate="slide">
        <!-- Page content -->
      </main>
      ```
    * To persist elements between page transitions, use the `transition:persist` directive:
      ```astro
      <header transition:persist>
        <!-- Header content that should remain intact during transitions -->
      </header>
      ```
    * For dynamic transition names from within framework components (React/Vue/etc.), use CSS custom properties:
      ```css
      .dynamic-image {
        view-transition-name: var(--transition-name);
      }
      ```
      ```jsx
      <img className="dynamic-image" style={{ '--transition-name': `image-${id}` }} src={src} />
      ```

4.  **Small Files & Components:**
    *   Keep files under **300 lines**. Refactor proactively.
    *   Break down large components into smaller, single-responsibility components.
    *   Use Astro's partial hydration for optimal performance.
5.  **Performance Optimization:**
    *   Minimize client-side JavaScript usage.
    *   Leverage Astro's static site generation capabilities.
    *   Implement proper image optimization using `@astrojs/image`.
    *   Use dynamic imports for code splitting.
6.  **Pattern Consistency:**
    *   Follow Astro's component patterns and conventions.
    *   Use consistent naming for files: PascalCase for components, kebab-case for pages.
    *   Maintain consistent directory structure.
7.  **Avoid Duplication (DRY):** Actively look for and reuse existing functionality. Refactor to eliminate duplication.
8.  **No Bazel:** Bazel is not permitted. Use project-specified build tools.
9.  **Linting/Formatting:** 
    *   Ensure all code conforms to project's ESLint/Prettier rules.
    *   **CRITICAL**: Always check for linter errors after creating or editing files.
    *   For `.astro` files, verify correct structure with imports and TypeScript in the frontmatter section (between `---` fences) and template code after.
    *   Fix any syntax or import errors before committing changes.
10. **File Naming:** Use clear, descriptive names. Avoid "temp", "refactored", "improved", etc., in permanent file names.  Maintain consistent casing in filenames (e.g., `Label.tsx` not `label.tsx`).
11. **No One-Time Scripts:** Do not commit one-time utility scripts into the main codebase.


## ♻️ Refactoring
## 🔒 Security

1.  **Server-Side Security:**
    *   Keep sensitive logic in server-side only components.
    *   Use Astro's built-in security features (automatic HTML escaping, CSP).
    *   Implement proper CORS policies.
    *   Use environment variables for sensitive configuration.
2.  **Client-Side Security:**
    *   Sanitize and validate all user inputs.
    *   Implement proper XSS protection.
    *   Use Content Security Policy (CSP) headers.
    *   Avoid exposing sensitive information in client-side scripts.
3.  **API Security:**
    *   Implement proper authentication and authorization.
    *   Rate limit API endpoints.
    *   Validate and sanitize API inputs.
    *   Use HTTPS for all external communications.
4.  **Dependency Security:**
    *   Regularly audit dependencies using `npm audit`.
    *   Pin dependency versions for consistency.
    *   Use official Astro integrations when available.
    *   Keep dependencies updated to patch security vulnerabilities.
5.  **Data Protection:**
    *   Never expose sensitive data in client-side code or public directories.
    *   Implement proper session management.
    *   Use secure headers (HSTS, X-Frame-Options, etc.).
    *   Follow data protection regulations (GDPR, CCPA, etc.).

## 🌳 Version Control & Environment
## 📄 Documentation Maintenance

1.  **Update Docs:**
    *   Keep documentation in sync with code changes.
    *   Document Astro-specific configurations and integrations.
    *   Maintain TypeScript type definitions and interfaces.
    *   Update security-related documentation promptly.
    *   Add documentation for Real User Monitoring (RUM) implementation, including setup, usage, and interpretation of data. (2025-04-02)
    * Add documentation for the new server-side authentication implementation, including details about strict token validation, rate limiting, IP verification, user agent consistency checks, role-based access control, and audit logging. (2025-04-09)
    * Add documentation for the new type system for protected API routes, including `ProtectedAPIRoute`, `ProtectRouteOptions`, and `ProtectRouteFunction`. (2025-04-12)
    * Add documentation for Astro best practices as outlined in the `astro` rule. (2025-04-02)
    * Add documentation for production readiness plan. (2025-04-02)
    * Add documentation explaining the use of YAML files for OpenAPI specifications and how to handle them within the Astro build process.  Specifically address the use of leading underscores to prevent processing by Astro while still allowing them to be served as static assets. (2025-04-02)
    * Add documentation for handling YAML files within the Astro build process, particularly for OpenAPI specifications.  Prefixing YAML filenames with an underscore (`_`) prevents Astro from processing them while still allowing them to be served as static assets. (2025-04-02)
    * Add documentation for the updated homepage and navigation layout, including details about the logo design, navigation link display, and the removal of the unnecessary title under the spinning globe. (2025-04-13)
    * Add documentation detailing the update to the logo in `src/components/widgets/LogoButton.astro` to use a gradient SVG instead of text. (2025-04-03)
    * Add documentation for the updated logo in `src/components/widgets/LogoButton.astro`, including details on the gradient, fonts ('Great Vibes', 'Dancing Script'), drop shadow, and glow filter. (2025-04-03)
    * Add documentation for the final logo implementation using hand-drawn paths in an SVG,  including details about the gradient, stroke width, and glow effect. (2025-04-03)
    * Add documentation for the final logo implementation in `src/components/widgets/LogoButton.astro`. The logo is a hand-drawn SVG with a pink-to-purple gradient. (2025-04-03)
    * Add documentation for the new PNG logo in `public/images/gradiant-ascent.png`. (2025-04-03)
    * Add documentation for the updated logo in `src/components/widgets/LogoButton.astro`. The logo is now a hand-drawn SVG with a gradient, stroke width, and glow effect.  The fonts used are 'Great Vibes' and 'Dancing Script'. (2025-04-13)
    * Add documentation for the updated logo in `src/components/widgets/LogoButton.astro`. The logo is now the SVG from the Antfu theme. (2025-04-13)
2.  **Keep Rules Updated:**
    *   Review and update this `.cursorrules` file regularly.
    *   Document new security measures and best practices.
    *   Track changes in Astro's recommended patterns.
    *   Monitor and document TypeScript version updates.
    * Add documentation for the new type system for protected API routes, including `ProtectedAPIRoute`, `ProtectRouteOptions`, and `ProtectRouteFunction`. (2025-04-12)


## PROJECT OVERVIEW
Project: Astro.  A significant portion of the codebase consists of React and TypeScript components, requiring conversion to Astro's component model.  The analysis indicates a substantial conversion effort is needed to fully transition to an Astro-based architecture.  A recent codebase analysis (2025-03-31 17:53:45) estimates that 40-50% of components (primarily static UI, layout, and content-heavy components) could benefit from conversion to `.astro` format, while the remaining 50-60% (interactive components like chat, analytics, and admin dashboards) should remain as React components due to their interactive nature.  Further investigation is needed to precisely quantify the number of files requiring conversion.  A more detailed breakdown of the conversion effort is available in `astro-conversion-plan.mdx`.  MainLayout.astro component created on 2025-03-31 22:59:59.
DashboardLayout.astro component updated on 2025-04-01.
MainLayout.astro uses UnoCSS.
DashboardLayout.astro uses UnoCSS.
DashboardLayout.astro component updated with ClientRouter, ErrorBoundary, improved responsiveness, meta tags, theme handling, transitions, accessibility features, and container class.  (2025-04-01)
DashboardLayout.astro component significantly improved on 2025-04-01: Added ClientRouter, ErrorBoundary, improved responsiveness, meta tags, theme handling with CSS variables, transitions, smoother theme changes, accessibility features (font fallbacks, dvh units), and container class.  Selection styling added.
ErrorBoundary component added (2025-04-01).
Convex integration prioritized on 2025-04-01.  React hooks for Convex functions created on 2025-04-01.
AdminDashboard.astro component updated on 2025-04-01: Import path for logging uses the alias path, metrics fetch moved to a separate API function (`getSystemMetrics`), error handling improved, and the client-side script is better organized.
BlogLayout.astro component added (2025-04-01).  Blog index page added (2025-04-01). Dynamic blog post route added (2025-04-01).
DocumentationLayout.astro component creation prioritized (2025-04-02).
DocumentationLayout.astro component created (2025-04-02).
Progress Update (2025-04-03): Documentation Layout Implementation (COMPLETED). Overall progress at 89% completion. Next steps prioritized. Layouts and homepage updated to reflect the new theme from the 'antfu' submodule. Integrated the Antfu theme layouts (BaseLayout, StandardLayout, MainLayout, etc.) and updated the homepage (`index.astro`) to match the new theme structure.
Progress Update (2025-04-04): DocumentationLayout.astro component created (2025-04-04). Added sample documentation pages (getting-started and API reference).
Progress Update (2025-04-05): Converted PerformanceDashboard component to Astro.
RealUserMonitoring.astro component created (2025-04-02).  A new page `/admin/real-user-monitoring` was added to display the RUM dashboard. (2025-04-02)
SimulatorDashboard.astro component created (2025-04-02).
Progress Update (2025-04-06): SimulatorDashboard Conversion (COMPLETED) - Created SimulatorDashboard.astro wrapper component with proper frontmatter structure and client:load directive. Created SimulatorDashboardReact.tsx as the actual implementation. Added comprehensive tests for the components. Mobile Device Tests (COMPLETED) - Implemented Playwright-based mobile device compatibility tests for various screen sizes and orientations. Tested core pages including home, documentation, dashboard, and simulator. Added screenshot generation for visual verification. Overall Progress - Project now at 95% completion with all dashboard components converted to Astro format and significant progress on testing infrastructure.
Progress Update (2025-04-07): Cross-Browser Compatibility Tests (COMPLETED) - Created comprehensive cross-browser tests using Playwright