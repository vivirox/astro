name: Security Scanning

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 0 * * *' # Run daily at midnight UTC

jobs:
  security-checks:
    name: Security Scanning
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # CodeQL Analysis with custom EHR queries
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, typescript, python
          queries: security-extended,security-and-quality
          config-file: ./.github/codeql/codeql-config.yml

      # Build for CodeQL Analysis (if needed)
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: '/language:javascript,typescript,python'
          upload: true
          output: sarif-results
          ram: 4096
          threads: 4

      # HIPAA Compliance Verification
      - name: HIPAA Standards Check
        run: |
          echo "Checking HIPAA Security Standards..."

          # Check encryption standards
          echo "Verifying encryption standards..."
          find . -type f -name "*.ts" -o -name "*.js" -o -name "*.py" | while read file; do
            if grep -i "createcipher\|createdecipher" "$file"; then
              echo "WARNING: Deprecated crypto methods found in $file"
            fi
          done

          # Check authentication methods
          echo "Verifying authentication methods..."
          find . -type f -name "*.ts" -o -name "*.js" -o -name "*.py" | while read file; do
            if ! grep -i "mfa\|2fa\|twofactor" "$file"; then
              echo "WARNING: No MFA found in $file"
            fi
          done

          # Check audit logging
          echo "Verifying audit logging..."
          find . -type f -name "*.ts" -o -name "*.js" -o -name "*.py" | while read file; do
            if ! grep -i "audit.log\|auditlog" "$file"; then
              echo "WARNING: No audit logging found in $file"
            fi
          done

      # Dependency Review
      - name: Dependency Review
        uses: actions/dependency-review-action@v3
        if: github.event_name == 'pull_request'

      # Enhanced Trivy Scanner
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          scanners: 'vuln,config,secret'
          timeout: '30m'
          list-all-pkgs: true

      # Upload Trivy scan results
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      # Checkov with enhanced HIPAA checks
      - name: Run Checkov scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: all
          output_format: sarif
          skip_check: CKV_SECRET_6,CKV_K8S_21
          soft_fail: true
          download_external_modules: true
          baseline: security-baseline.json
          quiet: false
          compact: false

      - name: Upload Checkov scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'checkov.sarif'

  hipaa-compliance:
    name: HIPAA Compliance Checks
    runs-on: ubuntu-latest
    needs: security-checks

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Enhanced PHI Detection
      - name: Install PHI detection tools
        run: |
          pip install presidio-analyzer presidio-anonymizer
          pip install spacy
          python -m spacy download en_core_web_lg

      - name: Run Enhanced PHI detection
        run: |
          echo "Running comprehensive PHI detection scan..."
          cat << 'EOF' > phi_detector.py
          from presidio_analyzer import AnalyzerEngine
          from presidio_anonymizer import AnonymizerEngine
          import os
          import json

          def scan_file(filepath):
              analyzer = AnalyzerEngine()
              anonymizer = AnonymizerEngine()
              results = []

              try:
                  with open(filepath, 'r', encoding='utf-8') as f:
                      text = f.read()
                      analysis_results = analyzer.analyze(text=text, language='en')

                      if analysis_results:
                          for result in analysis_results:
                              results.append({
                                  'file': filepath,
                                  'type': result.entity_type,
                                  'score': result.score,
                                  'text': text[result.start:result.end],
                                  'position': f"{result.start}-{result.end}"
                              })
              except Exception as e:
                  print(f"Error processing {filepath}: {str(e)}")

              return results

          def main():
              all_results = []
              for root, _, files in os.walk('.'):
                  if 'node_modules' in root or '.git' in root:
                      continue

                  for file in files:
                      if file.endswith(('.js', '.ts', '.py', '.json', '.md')):
                          filepath = os.path.join(root, file)
                          results = scan_file(filepath)
                          all_results.extend(results)

              with open('phi-scan-results.json', 'w') as f:
                  json.dump(all_results, f, indent=2)

              if all_results:
                  print("⚠️ PHI detected! Check phi-scan-results.json for details")
                  exit(1)
              else:
                  print("✅ No PHI detected")

          if __name__ == '__main__':
              main()
          EOF

          python phi_detector.py

      # Upload PHI scan results
      - name: Upload PHI Scan Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: phi-scan-results
          path: phi-scan-results.json
          retention-days: 30

  dependency-scan:
    name: Dependency Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      # Run npm audit with JSON output
      - name: Run npm audit
        run: npm audit --json > npm-audit.json || true

      # Setup Python
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      # Run safety check with JSON output
      - name: Run safety check
        run: |
          pip install safety
          safety check --json > safety-report.json || true

  secret-scanning:
    name: Secret Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # TruffleHog for advanced secret scanning
      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

      # Gitleaks as secondary scanner
      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_CONFIG: .gitleaks.toml

  report-generation:
    name: Security Report Generation
    needs: [security-checks, hipaa-compliance]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Download scan results
      - name: Download scan results
        uses: actions/download-artifact@v4
        with:
          pattern: '*-results*'
          merge-multiple: true

      - name: Generate Enhanced Security Report
        run: |
          cat << EOF > security-report.md
          # Security and HIPAA Compliance Report

          ## Overview
          - Date: $(date)
          - Branch: ${{ github.ref }}
          - Commit: ${{ github.sha }}

          ## HIPAA Compliance Status

          ### PHI Protection
          - [ ] PHI Detection Scan Complete
          - [ ] Data Encryption Verification
          - [ ] Access Control Implementation
          - [ ] Data Backup Verification

          ### Security Controls
          - [ ] Authentication Mechanisms
          - [ ] Authorization Controls
          - [ ] Audit Logging
          - [ ] Emergency Access Procedures

          ### Technical Safeguards
          - [ ] Encryption Standards
          - [ ] Access Monitoring
          - [ ] Integrity Controls
          - [ ] Transmission Security

          ## Security Scan Results

          ### CodeQL Analysis
          \`\`\`
          $(cat sarif-results/javascript.sarif 2>/dev/null || echo "No JavaScript results")
          $(cat sarif-results/python.sarif 2>/dev/null || echo "No Python results")
          \`\`\`

          ### PHI Detection Results
          \`\`\`
          $(cat phi-scan-results.json 2>/dev/null || echo "No PHI scan results available")
          \`\`\`

          ### Dependency Analysis
          \`\`\`
          $(cat npm-audit.json 2>/dev/null || echo "No NPM audit results")
          $(cat safety-report.json 2>/dev/null || echo "No Python safety results")
          \`\`\`

          ### Infrastructure Security
          \`\`\`
          $(cat checkov.sarif 2>/dev/null || echo "No infrastructure scan results")
          \`\`\`

          ## Critical Findings
          $(awk '/CRITICAL|HIGH/' trivy-results.sarif 2>/dev/null || echo "No critical findings")

          ## Recommendations
          1. Review and address all PHI findings immediately
          2. Update dependencies with security vulnerabilities
          3. Implement missing security controls
          4. Review and enhance audit logging
          5. Verify encryption implementation

          ## Required Actions
          - [ ] Review critical security findings
          - [ ] Address PHI exposure risks
          - [ ] Update security documentation
          - [ ] Schedule security review meeting
          - [ ] Plan remediation timeline

          ## Next Steps
          1. Immediate action required for critical findings
          2. Schedule comprehensive security review
          3. Update HIPAA compliance documentation
          4. Review security architecture
          EOF

      - name: Upload Security Report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md
          retention-days: 90

      # Enhanced notifications
      - name: Process and Send Notifications
        if: always()
        run: |
          CRITICAL_COUNT=$(grep -c "CRITICAL" trivy-results.sarif 2>/dev/null || echo "0")
          PHI_COUNT=$(grep -c "Found" phi-scan-results.json 2>/dev/null || echo "0")
          FHIR_ISSUES=$(grep -c "FHIR" sarif-results/javascript.sarif 2>/dev/null || echo "0")

          if [ "$CRITICAL_COUNT" -gt 0 ] || [ "$PHI_COUNT" -gt 0 ] || [ "$FHIR_ISSUES" -gt 0 ]; then
            echo "::warning ::Found $CRITICAL_COUNT critical vulnerabilities, $PHI_COUNT potential PHI exposures, and $FHIR_ISSUES FHIR security issues"
            echo "SECURITY_ALERT=1" >> $GITHUB_ENV

            # Prepare notification message
            cat << EOF > notification.json
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "🚨 Security Scan Alert",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Repository:* ${{ github.repository }}\n*Branch:* ${{ github.ref }}\n*Commit:* ${{ github.sha }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Findings Summary:*\n• Critical Vulnerabilities: $CRITICAL_COUNT\n• PHI Exposures: $PHI_COUNT\n• FHIR Security Issues: $FHIR_ISSUES"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "View detailed report: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                  }
                }
              ]
            }
            EOF
          fi

      - name: Send Slack Notification
        if: env.SECURITY_ALERT == '1'
        uses: slackapi/slack-github-action@v1.25.0
        with:
          payload: file://notification.json
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_SECURITY_WEBHOOK }}

      - name: Send Email Notification
        if: env.SECURITY_ALERT == '1'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: 'Security Alert: ${{ github.repository }}'
          body: |
            Security scan detected issues in ${{ github.repository }}

            Findings Summary:
            - Critical Vulnerabilities: ${{ env.CRITICAL_COUNT }}
            - PHI Exposures: ${{ env.PHI_COUNT }}
            - FHIR Security Issues: ${{ env.FHIR_ISSUES }}

            View detailed report: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

            This is an automated message. Please do not reply.
          to: ${{ secrets.SECURITY_TEAM_EMAIL }}
          from: GitHub Security Scanner <${{ secrets.SMTP_USERNAME }}>

      - name: Install PHI detector dependencies
        run: npm install glob

      - name: Run PHI detector
        run: node scripts/phi-detector.js --output=phi-scan-results.json
