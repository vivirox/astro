name: Security Scanning

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 0 * * *' # Run daily at midnight UTC

permissions:
  contents: read
  security-events: write
  pull-requests: read
  checks: write
  issues: write

jobs:
  security-checks:
    name: Security Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # CodeQL Analysis with custom EHR queries
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, typescript, python
          queries: security-extended,security-and-quality
          config-file: ./.github/codeql/codeql-config.yml
          ram: 8192
          threads: 4
          debug: true

      # Additional custom queries for healthcare systems
      - name: Add Custom Healthcare Queries
        run: |
          mkdir -p .github/codeql/healthcare-queries
          cat << 'EOF' > .github/codeql/healthcare-queries/phi-exposure.ql
          /**
           * @name PHI Data Exposure
           * @description Detects potential exposure of Protected Health Information
           * @kind problem
           * @problem.severity error
           * @precision high
           * @id js/phi-exposure
           * @tags security
           *       hipaa
           *       privacy
           */
          import javascript

          from DataFlow::Node source, DataFlow::Node sink
          where exists(DataFlow::PathNode mid |
            isPhiSource(source) and
            isUnsafeSink(sink) and
            hasPath(source, mid, sink)
          )
          select sink, "Potential PHI exposure"
          EOF

      # Build for CodeQL Analysis (if needed)
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: '/language:javascript,typescript,python'
          upload: true
          output: 'sarif-results'
          ram: 4096
          threads: 4

      # HIPAA Compliance Verification
      - name: HIPAA Standards Check
        run: |
          echo "Checking HIPAA Security Standards..."

          # Check encryption implementation
          echo "Verifying encryption standards..."
          find . -type f -name "*.ts" -o -name "*.js" -o -name "*.py" | while read file; do
            if grep -i "createcipher\\|createdecipher\\|crypto.createCipher\\|crypto.createDecipher" "$file"; then
              echo "ERROR: Deprecated/insecure crypto methods found in $file"
              exit 1
            fi
          done

          # Check authentication and authorization
          echo "Verifying access controls..."
          find . -type f -name "*.ts" -o -name "*.js" -o -name "*.py" | while read file; do
            if grep -i "router.get\\|router.post\\|router.put\\|router.delete" "$file"; then
              if ! grep -i "authenticate\\|authorize\\|checkPermission" "$file"; then
                echo "ERROR: Route without authentication checks in $file"
                exit 1
              fi
            fi
          done

          # Check audit logging
          echo "Verifying audit logging..."
          find . -type f -name "*.ts" -o -name "*.js" -o -name "*.py" | while read file; do
            if grep -i "patient\\|phi\\|medical" "$file"; then
              if ! grep -i "audit\\|log.info\\|logger" "$file"; then
                echo "ERROR: PHI handling without audit logging in $file"
                exit 1
              fi
            fi
          done

      # Dependency Review
      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        if: github.event_name == 'pull_request'

      # Enhanced Trivy Scanner
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          scanners: 'vuln,config,secret'
          timeout: '30m'
          list-all-pkgs: true

      # Upload Trivy scan results
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('trivy-results.sarif') != ''
        with:
          sarif_file: 'trivy-results.sarif'

      # Checkov with enhanced HIPAA checks
      - name: Run Checkov scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: all
          output_format: sarif
          skip_check: CKV_SECRET_6,CKV_K8S_21
          soft_fail: true
          download_external_modules: true
          baseline: security-baseline.json
          quiet: false
          compact: false

      - name: Upload Checkov scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('checkov.sarif') != ''
        with:
          sarif_file: 'checkov.sarif'

      - name: Create Security Issue
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            const fs = require('fs');
            const report = fs.existsSync('security-report.md') ?
              fs.readFileSync('security-report.md', 'utf8') :
              'Security scan completed with issues';

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 Security Scan Alert',
              body: `Security scan detected issues:\n\n${report}`,
              labels: ['security', 'hipaa-compliance']
            });

  hipaa-compliance:
    name: HIPAA Compliance Checks
    runs-on: ubuntu-latest
    needs: security-checks

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Enhanced PHI Detection
      - name: Install PHI detection tools
        run: |
          pip install presidio-analyzer presidio-anonymizer
          pip install spacy
          python -m spacy download en_core_web_lg

      - name: Run Enhanced PHI detection
        run: |
          echo "Running comprehensive PHI detection scan..."
          cat << 'EOF' > phi_detector.py
          from presidio_analyzer import AnalyzerEngine, PatternRecognizer
          from presidio_anonymizer import AnonymizerEngine
          import os
          import json
          import re

          # Healthcare specific patterns
          icd10_pattern = r'\b[A-Z]\d{2}(?:\.\d{1,2})?\b'
          mrn_pattern = r'\b(?:MRN|Medical Record Number|Patient ID)[\s:=-]*\d{4,10}\b'
          fhir_id_pattern = r'\b(Patient|Observation|Condition|Procedure|MedicationRequest)\/[a-zA-Z0-9-]{1,64}\b'
          npi_pattern = r'\b\d{10}\b'
          date_pattern = r'\b\d{1,2}[-/]\d{1,2}[-/]\d{2,4}\b'

          # Create custom recognizers
          icd10_recognizer = PatternRecognizer(
              supported_entity="ICD10_CODE",
              patterns=[{"name": "icd10", "regex": icd10_pattern}]
          )
          mrn_recognizer = PatternRecognizer(
              supported_entity="MEDICAL_RECORD_NUMBER",
              patterns=[{"name": "mrn", "regex": mrn_pattern}]
          )
          fhir_recognizer = PatternRecognizer(
              supported_entity="FHIR_RESOURCE_ID",
              patterns=[{"name": "fhir_id", "regex": fhir_id_pattern}]
          )
          npi_recognizer = PatternRecognizer(
              supported_entity="NPI_NUMBER",
              patterns=[{"name": "npi", "regex": npi_pattern}]
          )

          analyzer = AnalyzerEngine()
          anonymizer = AnonymizerEngine()

          # Add healthcare recognizers
          analyzer.registry.add_recognizer(icd10_recognizer)
          analyzer.registry.add_recognizer(mrn_recognizer)
          analyzer.registry.add_recognizer(fhir_recognizer)
          analyzer.registry.add_recognizer(npi_recognizer)

          def scan_code(content, filename):
              # Analyze for PHI
              results = analyzer.analyze(
                  text=content,
                  language="en",
                  return_decision_process=True
              )

              if results:
                  print(f"Found potential PHI in {filename}:")
                  for result in results:
                      print(f"- {result.entity_type}: {content[result.start:result.end]}")
                  return True
              return False

          # Scan all relevant files
          phi_findings = []
          for root, _, files in os.walk("."):
              for file in files:
                  if file.endswith((".ts", ".js", ".py", ".json", ".md")):
                      filepath = os.path.join(root, file)
                      with open(filepath, "r", encoding="utf-8") as f:
                          try:
                              content = f.read()
                              if scan_code(content, filepath):
                                  print(f"WARNING: Potential PHI found in {filepath}")
                                  phi_findings.append({"file": filepath, "type": "PHI_DETECTION", "severity": "HIGH"})
                          except Exception as e:
                              print(f"Error scanning {filepath}: {str(e)}")

          # Write findings to a JSON file
          with open("phi-scan-results.json", "w") as f:
              json.dump({"findings": phi_findings}, f)
          EOF

          python phi_detector.py

      # Upload PHI scan results
      - name: Upload PHI Scan Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: phi-scan-results
          path: phi-scan-results.json
          retention-days: 30

  dependency-scan:
    name: Dependency Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      # Run npm audit with JSON output
      - name: Run npm audit
        run: npm audit --json > npm-audit.json || true

      # Setup Python
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      # Run safety check with JSON output
      - name: Run safety check
        run: |
          pip install safety
          safety check --json > safety-report.json || true

  secret-scanning:
    name: Secret Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # TruffleHog for advanced secret scanning
      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

      # Custom healthcare credential patterns
      - name: Install custom scanners
        run: |
          cat << EOF > healthcare-patterns.json
          {
            "EHR_API_KEY": {
              "description": "EHR API Key Pattern",
              "pattern": "(?i)(epic|cerner|allscripts|athena)([_-]?api[_-]?key|apikey)([^a-zA-Z0-9]|$){0,1}[=:\"\\s'\\`]{1,2}([a-zA-Z0-9=_\\-\\+/]{16,45})"
            },
            "FHIR_TOKEN": {
              "description": "FHIR Access Token Pattern",
              "pattern": "(?i)(fhir[_-]?token|fhir[_-]?access[_-]?token)([^a-zA-Z0-9]|$){0,1}[=:\"\\s'\\`]{1,2}([a-zA-Z0-9=_\\-\\+/\\.]{32,250})"
            },
            "PATIENT_ID": {
              "description": "Patient ID Pattern",
              "pattern": "(?i)(patient[_-]?id|mrn|medical[_-]?record[_-]?number)([^a-zA-Z0-9]|$){0,1}[=:\"\\s'\\`]{1,2}([A-Z0-9]{6,15})"
            }
          }
          EOF

      # Gitleaks with custom rules
      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ github.token }}
          GITLEAKS_CONFIG: .gitleaks.toml
          GITLEAKS_RULES: healthcare-patterns.json

  report-generation:
    name: Security Report Generation
    needs: [security-checks, hipaa-compliance]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Download scan results
      - name: Download scan results
        uses: actions/download-artifact@v4
        with:
          pattern: '*-results*'
          merge-multiple: true

      - name: Generate Enhanced Security Report
        run: |
          cat << EOF > security-report.md
          # Security and HIPAA Compliance Report

          ## Overview
          - Date: $(date)
          - Branch: ${{ github.ref }}
          - Commit: ${{ github.sha }}
          - Environment: production

          ## HIPAA Compliance Status

          ### Access Controls and Authentication
          - [ ] Multi-factor authentication enforcement
          - [ ] Role-based access control implementation
          - [ ] Access review documentation
          - [ ] Session management controls
          - [ ] Emergency access procedures

          ### Data Protection
          - [ ] PHI Detection Scan Complete
          - [ ] End-to-end encryption verified
          - [ ] Zero-knowledge proof system active
          - [ ] Data backup encryption verified
          - [ ] Key rotation schedule confirmed

          ### Audit and Monitoring
          - [ ] Comprehensive audit logging
          - [ ] Real-time security monitoring
          - [ ] Intrusion detection active
          - [ ] Access attempt logging
          - [ ] PHI access tracking

          ### Technical Safeguards
          - [ ] TLS 1.3 enforcement
          - [ ] CORS policy verification
          - [ ] CSP implementation
          - [ ] Rate limiting controls
          - [ ] Input validation

          ### Business Associate Agreements
          - [ ] AI provider BAAs verified
          - [ ] Cloud service BAAs current
          - [ ] Vendor compliance verification
          - [ ] Data handling agreements
          - [ ] BAA tracking system

          ## Security Scan Results

          ### PHI Detection Summary
          \`\`\`
          $(cat phi-scan-results.json 2>/dev/null || echo "No PHI scan results available")
          \`\`\`

          ### Code Analysis
          \`\`\`
          $(cat sarif-results/javascript.sarif 2>/dev/null || echo "No JavaScript results")
          $(cat sarif-results/python.sarif 2>/dev/null || echo "No Python results")
          \`\`\`

          ### Dependency Analysis
          \`\`\`
          $(cat npm-audit.json 2>/dev/null || echo "No NPM audit results")
          $(cat safety-report.json 2>/dev/null || echo "No Python safety results")
          \`\`\`

          ### Infrastructure Security
          \`\`\`
          $(cat checkov.sarif 2>/dev/null || echo "No infrastructure scan results")
          \`\`\`

          ## Critical Findings and Violations
          $(awk '/CRITICAL|HIGH/' trivy-results.sarif 2>/dev/null || echo "No critical findings")

          ### PHI Exposure Risks
          $(jq -r '.findings[] | select(.severity=="HIGH") | "- [\(.severity)] \(.type) in \(.file)"' phi-scan-results.json 2>/dev/null || echo "No high-severity PHI findings")

          ### Security Vulnerabilities
          $(jq -r '.runs[].results[] | select(.level=="error") | "- [\(.ruleId)] \(.message.text)"' sarif-results/javascript.sarif 2>/dev/null || echo "No critical JavaScript vulnerabilities")
          $(jq -r '.runs[].results[] | select(.level=="error") | "- [\(.ruleId)] \(.message.text)"' sarif-results/python.sarif 2>/dev/null || echo "No critical Python vulnerabilities")

          ## Required Actions
          1. **Critical Findings**
             - [ ] Review and address all critical security vulnerabilities
             - [ ] Investigate and remediate PHI exposure risks
             - [ ] Verify fixes with follow-up scans

          2. **HIPAA Compliance**
             - [ ] Update compliance documentation
             - [ ] Review access control implementations
             - [ ] Verify audit logging completeness
             - [ ] Check encryption configurations
             - [ ] Update risk assessment

          3. **Infrastructure**
             - [ ] Review infrastructure security configurations
             - [ ] Verify backup procedures
             - [ ] Check monitoring systems
             - [ ] Update disaster recovery plans

          ## Remediation Timeline
          1. Immediate (24 hours):
             - Address critical vulnerabilities
             - Fix any PHI exposures
             - Update security headers

          2. Short-term (7 days):
             - Update dependencies
             - Implement missing security controls
             - Enhance logging coverage

          3. Long-term (30 days):
             - Complete HIPAA documentation updates
             - Conduct penetration testing
             - Review and update security architecture

          ## Documentation Updates Required
          - [ ] Security controls documentation
          - [ ] HIPAA compliance procedures
          - [ ] Incident response plan
          - [ ] Disaster recovery procedures
          - [ ] Training materials

          ---
          Generated by GitHub Actions on $(date)
          Report ID: ${{ github.run_id }}
          EOF

      - name: Process Security Findings
        run: |
          # Set default values and log findings
          CRITICAL_COUNT=$(grep -c "CRITICAL" trivy-results.sarif 2>/dev/null || echo "0")
          PHI_COUNT=$(grep -c "Found" phi-scan-results.json 2>/dev/null || echo "0")
          FHIR_ISSUES=$(grep -c "FHIR" sarif-results/javascript.sarif 2>/dev/null || echo "0")

          echo "Security scan summary:"
          echo "- Critical Vulnerabilities: $CRITICAL_COUNT"
          echo "- PHI Exposures: $PHI_COUNT"
          echo "- FHIR Security Issues: $FHIR_ISSUES"

          if [ "$CRITICAL_COUNT" -gt 0 ] || [ "$PHI_COUNT" -gt 0 ] || [ "$FHIR_ISSUES" -gt 0 ]; then
            echo "SECURITY_ALERT=true" >> $GITHUB_ENV
            echo "⚠️ Security issues detected! See detailed reports."
          else
            echo "✅ No critical security issues detected."
          fi

      - name: Install PHI detector dependencies
        run: npm install glob

      - name: Run PHI detector
        run: node scripts/phi-detector.js --output=phi-scan-results.json
