name: Health Check

on:
  schedule:
    - cron: '0 */6 * * *' # Run every 6 hours during development
  workflow_dispatch: # Allow manual trigger

permissions:
  contents: read
  id-token: write
  checks: write

jobs:
  health_check:
    runs-on: ubuntu-latest
    timeout-minutes: 5

    env:
      NODE_VERSION: '20.11.0'
      PNPM_VERSION: '10.0.0'
      # During development, we'll use localhost. Change this when deploying:
      APP_URL: 'http://localhost:3000'
      API_URL: 'http://localhost:3000/api'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup PNPM
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install

      - name: Start development server
        run: |
          # Start the development server in the background
          pnpm dev &
          # Wait for the server to be ready
          echo "Waiting for development server to start..."
          sleep 30

      - name: Run Health Checks
        id: healthcheck
        run: |
          # Function to perform health check with detailed output
          check_endpoint() {
            local url=$1
            local description=$2

            echo "Checking $description at $url..."

            # Try curl with verbose output and store both status and full response
            echo "Sending HTTP request to $url..."
            local response_file=$(mktemp)
            local status=$(curl -v -L --max-time 10 -s -o "$response_file" -w "%{http_code}" "$url" 2>&1)
            local curl_exit_code=$?

            # Print detailed debug information
            echo "Curl exit code: $curl_exit_code"
            echo "HTTP Status: $status"
            echo "Response headers and body:"
            cat "$response_file"
            rm "$response_file"

            # Check for curl errors
            if [ $curl_exit_code -ne 0 ]; then
              echo "::error::$description connection failed (curl exit code: $curl_exit_code)"
              return 1
            fi

            # During development, accept 200-299 status codes
            if [[ ! "$status" =~ ^2[0-9]{2}$ ]]; then
              echo "::error::$description is down or returning errors (HTTP $status)"
              return 1
            fi

            echo "$description is healthy"
            return 0
          }

          # Main site check
          if ! check_endpoint "${{ env.APP_URL }}" "Development Server"; then
            echo "status=failing" >> $GITHUB_OUTPUT
            exit 1
          fi

          # API health check (only if you have the endpoint ready)
          # if ! check_endpoint "${{ env.API_URL }}/health" "API"; then
          #   echo "status=failing" >> $GITHUB_OUTPUT
          #   exit 1
          # fi

          echo "status=passing" >> $GITHUB_OUTPUT
        shell: /usr/bin/bash -e {0}

      - name: Cleanup
        if: always()
        run: |
          # Kill the development server
          pkill -f "pnpm dev" || true

      - name: Send Notification on Failure
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        with:
          slack_webhook: ${{ secrets.SLACK_WEBHOOK }}
          channel: general
          color: '#FF0000'
          title: 'Development Health Check Failed'
          message: |
            The development server health check has failed. Details:
            - Time: ${{ steps.healthcheck.outputs.time }}
            - Environment: Development (localhost)
            Please check the GitHub Actions logs for more information.
