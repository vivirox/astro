name: CI

permissions:
  contents: read

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  PNPM_VERSION: 10.6.1
  NODE_VERSION: 20.19.0
  PNPM_HOME: ${{ github.workspace }}/.pnpm

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Set PNPM_HOME to PATH
        run: |
          mkdir -p $PNPM_HOME
          echo "$PNPM_HOME" >> $GITHUB_PATH

      - name: Verify pnpm installation
        run: |
          which pnpm || echo "pnpm not found in PATH"
          pnpm --version
          echo "PNPM_HOME: $PNPM_HOME"
          echo "PATH: $PATH"

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Lint
        if: github.event_name == 'pull_request'
        run: pnpm lint

  typecheck:
    name: TypeScript Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Set PNPM_HOME to PATH
        run: |
          mkdir -p $PNPM_HOME
          echo "$PNPM_HOME" >> $GITHUB_PATH

      - name: Verify pnpm installation
        run: |
          which pnpm || echo "pnpm not found in PATH"
          pnpm --version
          echo "PNPM_HOME: $PNPM_HOME"
          echo "PATH: $PATH"

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Type check
        if: github.event_name == 'pull_request'
        run: pnpm check

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Set PNPM_HOME to PATH
        run: |
          mkdir -p $PNPM_HOME
          echo "$PNPM_HOME" >> $GITHUB_PATH

      - name: Verify pnpm installation
        run: |
          which pnpm || echo "pnpm not found in PATH"
          pnpm --version
          echo "PNPM_HOME: $PNPM_HOME"
          echo "PATH: $PATH"

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Install Playwright browsers
        run: pnpm test:setup

      - name: Run tests
        run: pnpm test

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, typecheck, test]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Set PNPM_HOME to PATH
        run: |
          mkdir -p $PNPM_HOME
          echo "$PNPM_HOME" >> $GITHUB_PATH

      - name: Verify pnpm installation
        run: |
          which pnpm || echo "pnpm not found in PATH"
          pnpm --version
          echo "PNPM_HOME: $PNPM_HOME"
          echo "PATH: $PATH"

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Ensure UI component directories exist
        run: |
          mkdir -p src/components/ui/button

          echo 'export { Button, type ButtonProps, type ButtonVariant, type ButtonSize } from "../button"' \
            > src/components/ui/button/index.ts
          echo 'export { default } from "../button"' >> src/components/ui/button/index.ts

      - name: Build
        run: pnpm build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: dist
          retention-days: 7

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Set PNPM_HOME to PATH
        run: |
          mkdir -p $PNPM_HOME
          echo "$PNPM_HOME" >> $GITHUB_PATH

      - name: Verify pnpm installation
        run: |
          which pnpm || echo "pnpm not found in PATH"
          pnpm --version
          echo "PNPM_HOME: $PNPM_HOME"
          echo "PATH: $PATH"

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build
          path: dist

      - name: Install dependencies
        run: pnpm install

      - name: Deploy to production
        run: pnpm deploy
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          PRODUCTION: true

      - name: Verify deployment
        run: pnpm tsx src/scripts/verify-deployment.ts
        env:
          NODE_ENV: production
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          REDIS_URL: ${{ secrets.REDIS_URL }}
          STORAGE_URL: ${{ secrets.STORAGE_URL }}

  rollback:
    name: Automatic Rollback
    runs-on: ubuntu-latest
    needs: [deploy]
    if: failure() && github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Set PNPM_HOME to PATH
        run: |
          mkdir -p $PNPM_HOME
          echo "$PNPM_HOME" >> $GITHUB_PATH

      - name: Verify pnpm installation
        run: |
          which pnpm || echo "pnpm not found in PATH"
          pnpm --version
          echo "PNPM_HOME: $PNPM_HOME"
          echo "PATH: $PATH"

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Execute rollback
        id: rollback
        run: |
          echo "Initiating automatic rollback due to deployment failure"
          pnpm tsx src/scripts/rollback.ts --notify=true --environment=production
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          EMAIL_API_KEY: ${{ secrets.EMAIL_API_KEY }}
          NODE_ENV: production
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          REDIS_URL: ${{ secrets.REDIS_URL }}
          STORAGE_URL: ${{ secrets.STORAGE_URL }}

      - name: Send fallback Slack notification (GitHub Action)
        if: failure() && steps.rollback.outcome == 'failure'
        uses: slackapi/slack-github-action@v1.25.0
        with:
          # Using the payload format for webhook URL
          payload: |
            {
              "text": "🚨 *URGENT: Deployment and rollback failed!* Manual intervention required.\n*Repository:* ${{ github.repository }}\n*Environment:* production\n*Time:* $(date)\n*Workflow:* ${{ github.workflow }}\n*Run ID:* ${{ github.run_id }}",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "🚨 URGENT: Deployment and rollback failed!"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Manual intervention required*\n\n*Repository:* ${{ github.repository }}\n*Environment:* production\n*Workflow:* ${{ github.workflow }}\n*Run ID:* ${{ github.run_id }}"
                  }
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Workflow Run"
                      },
                      "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Fallback curl notification to Slack
        if: failure() && steps.rollback.outcome == 'failure'
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"🚨 *URGENT: Deployment and rollback failed!* Manual intervention required.\n*Repository:* ${{ github.repository }}\n*Environment:* production\n*Time:* '"$(date)"'\n*Workflow:* ${{ github.workflow }}\n*Run ID:* ${{ github.run_id }}"}' \
            ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Final emergency notification
        if: failure() && steps.rollback.outcome == 'failure'
        run: |
          # Use multiple notification methods to ensure the team is alerted

          # Direct email via mailx if available
          if command -v mailx &> /dev/null; then
            echo "CRITICAL ALERT: Deployment and rollback failed for ${{ github.repository }}. Manual intervention required." | \
            mailx -s "🚨 URGENT: Deployment Failure - ${{ github.repository }}" devops@gradiant.health
          fi

          # Create an issue in the repository as a last resort
          if [[ -n "${{ secrets.GITHUB_TOKEN }}" ]]; then
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/${{ github.repository }}/issues \
              -d '{
                "title": "🚨 URGENT: Deployment and Rollback Failed",
                "body": "**CRITICAL ISSUE**\n\nBoth the deployment and automatic rollback have failed. Manual intervention is required.\n\n**Details:**\n- Environment: production\n- Workflow: ${{ github.workflow }}\n- Run ID: ${{ github.run_id }}\n- Time: '"$(date)"'\n\nPlease check the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.",
                "labels": ["critical", "deployment", "failure"]
              }'
          fi

          # Write to the CI logs with high visibility
          echo "::error::CRITICAL ALERT: Both deployment and rollback have failed. Manual intervention required IMMEDIATELY."

          # Exit with a clear error message
          echo "CRITICAL: All notification attempts completed. Manual intervention required."
          exit 1
