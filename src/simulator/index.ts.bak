/**
 * Real-time Therapeutic Practice Simulator
 *
 * A HIPAA-compliant simulator for practicing therapeutic techniques
 * with zero data retention and real-time feedback.
 */

"use client"

import React from 'react'

// Components
export { SimulationContainer } from './components/SimulationContainer'
export { EnhancedSimulationContainer } from './components/EnhancedSimulationContainer'
export { ScenarioSelector } from './components/ScenarioSelector'
export { default as EmpathyMeter } from './components/EmpathyMeter'
export { default as RealTimeFeedbackPanel } from './components/RealTimeFeedbackPanel'

// Context and Provider
export {
  SimulatorProvider,
  useSimulatorContext,
} from './context/SimulatorProvider'

// Hooks
export { useSimulator } from './hooks/useSimulator'
export { useAnonymizedMetrics } from './hooks/useAnonymizedMetrics'
export { useRealTimeAnalysis } from './hooks/useRealTimeAnalysis'

// Types
export type {
  Scenario,
  SimulationFeedback,
  SimulatorContext,
  SimulatorProviderProps,
  SimulationContainerProps,
  ScenarioSelectorProps,
  AnonymizedMetrics,
  RealTimeFeedback,
} from './types'

export {
  TherapeuticDomain,
  ScenarioDifficulty,
  TherapeuticTechnique,
  FeedbackType,
} from './types'

// Utils and Data
export {
  getAllScenarios,
  getScenarioById,
  getScenariosByDomain,
  getScenariosByDifficulty,
} from './data/scenarios'
export {
  getUserConsentPreference,
  setUserConsentPreference,
  checkBrowserCompatibility,
  anonymizeFeedback,
  generateConsentForm,
} from './utils/privacy'

// Export main simulator components
export { default as FeedbackPanel } from './components/FeedbackPanel'
export { default as ScenarioInfo } from './components/ScenarioInfo'
export { default as VideoDisplay } from './components/VideoDisplay'
export { default as ControlPanel } from './components/ControlPanel'

// Export services
export { WebRTCService } from './services/WebRTCService'
export { FeedbackService } from './services/FeedbackService'

/**
 * Real-Time Healthcare Simulation Module
 *
 * This module provides a privacy-first, real-time simulation environment for
 * healthcare practitioners to practice therapeutic interactions without any
 * data recording or persistent storage. All processing happens in real-time
 * with zero data retention to ensure HIPAA compliance and user privacy.
 *
 * Key features:
 * - Real-time interaction via WebRTC
 * - Zero data retention with privacy-first design
 * - Immediate AI-powered feedback
 * - Voice recognition for more natural interaction
 * - Real-time empathy measurement and therapeutic technique detection
 * - Anonymized metrics collection (with user consent only)
 *
 * Usage:
 * 1. Wrap your application with SimulatorProvider
 * 2. Use the EnhancedSimulationContainer component for the full experience
 * 3. Access simulation state and functions through the useSimulator hook
 *
 * Example:
 * ```tsx
 * import { SimulatorProvider, EnhancedSimulationContainer } from './simulator';
 *
 * const App = () => {
 *   return (
 *     <SimulatorProvider>
 *       <EnhancedSimulationContainer scenarioId="anxiety-001" />
 *     </SimulatorProvider>
 *   );
 * };
 * ```
 */

// Export all simulator components with simple implementations
export function SimulatorProvider({ children }: { children: React.ReactNode }) {
  return <>{children}</>
}

export function SimulationContainer({
  scenarioId,
  className
}: {
  scenarioId: string
  className?: string
}) {
  return (
    <div className={className}>
      <div className="p-6">
        <h3 className="text-lg font-medium mb-4">Simulation: {scenarioId}</h3>
        <p className="text-gray-600 mb-6">
          This is a placeholder for the simulation interface. In the real implementation,
          this would contain the interactive simulation with audio/video controls.
        </p>
        <div className="p-4 bg-gray-100 rounded-lg">
          <p className="text-sm text-gray-700">
            Scenario description would appear here. The user would be able to interact
            with a simulated client using speech recognition and receive real-time feedback.
          </p>
        </div>
      </div>
    </div>
  )
}

export function ScenarioSelector({
  onSelect,
  className
}: {
  onSelect: (scenarioId: string) => void
  className?: string
}) {
  const scenarios = [
    { id: 'depression', name: 'Depression Assessment', difficulty: 'Intermediate' },
    { id: 'anxiety', name: 'Anxiety Management', difficulty: 'Beginner' },
    { id: 'trauma', name: 'Trauma-Informed Care', difficulty: 'Advanced' },
  ]

  return (
    <div className={className}>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {scenarios.map(scenario => (
          <div
            key={scenario.id}
            className="border rounded-lg p-4 hover:bg-gray-50 cursor-pointer"
            onClick={() => onSelect(scenario.id)}
          >
            <h4 className="font-medium mb-1">{scenario.name}</h4>
            <p className="text-sm text-gray-600 mb-2">Difficulty: {scenario.difficulty}</p>
            <button
              className="text-sm text-blue-600 hover:text-blue-800"
              onClick={(e) => {
                e.stopPropagation()
                onSelect(scenario.id)
              }}
            >
              Start Scenario â†’
            </button>
          </div>
        ))}
      </div>
    </div>
  )
}

export function useAnonymizedMetrics() {
  // Stub implementation that would normally track user metrics
  return {
    sessionCount: 0,
    averageScore: 0,
    skillsImproving: [],
    skillsNeeding: ['Active listening', 'Empathetic responses'],
    lastSessionDate: null
  }
}
