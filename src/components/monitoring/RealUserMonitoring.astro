---
import { getMonitoringConfig } from '@/lib/monitoring/config'

interface Props {
  title: string
  description: string
  refreshInterval?: number
}

const { title, description, refreshInterval = 60000 } = Astro.props

const config = getMonitoringConfig()
---

<div class="bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden">
  <div
    class="p-4 border-b border-gray-200 dark:border-gray-700 flex justify-between items-center"
  >
    <div>
      <h2 class="text-xl font-semibold text-gray-800 dark:text-white">
        {title}
      </h2>
      <p class="text-sm text-gray-600 dark:text-gray-400">{description}</p>
    </div>
    <button
      id="refresh-button"
      class="px-3 py-1 bg-blue-100 hover:bg-blue-200 dark:bg-blue-900 dark:hover:bg-blue-800 text-blue-700 dark:text-blue-200 rounded text-sm"
    >
      Refresh
    </button>
  </div>

  <div class="p-4">
    <div id="metrics-container" class="grid grid-cols-1 md:grid-cols-3 gap-4">
      <div class="bg-gray-50 dark:bg-gray-700 p-3 rounded-lg">
        <h3 class="text-sm font-medium text-gray-500 dark:text-gray-400">
          LCP (Largest Contentful Paint)
        </h3>
        <p
          id="lcp-value"
          class="text-2xl font-bold text-gray-900 dark:text-white"
        >
          Loading...
        </p>
        <div class="w-full h-2 bg-gray-200 dark:bg-gray-600 rounded-full mt-2">
          <div
            id="lcp-bar"
            class="h-2 bg-green-500 rounded-full"
            style="width: 0%"
          >
          </div>
        </div>
      </div>

      <div class="bg-gray-50 dark:bg-gray-700 p-3 rounded-lg">
        <h3 class="text-sm font-medium text-gray-500 dark:text-gray-400">
          FID (First Input Delay)
        </h3>
        <p
          id="fid-value"
          class="text-2xl font-bold text-gray-900 dark:text-white"
        >
          Loading...
        </p>
        <div class="w-full h-2 bg-gray-200 dark:bg-gray-600 rounded-full mt-2">
          <div
            id="fid-bar"
            class="h-2 bg-green-500 rounded-full"
            style="width: 0%"
          >
          </div>
        </div>
      </div>

      <div class="bg-gray-50 dark:bg-gray-700 p-3 rounded-lg">
        <h3 class="text-sm font-medium text-gray-500 dark:text-gray-400">
          CLS (Cumulative Layout Shift)
        </h3>
        <p
          id="cls-value"
          class="text-2xl font-bold text-gray-900 dark:text-white"
        >
          Loading...
        </p>
        <div class="w-full h-2 bg-gray-200 dark:bg-gray-600 rounded-full mt-2">
          <div
            id="cls-bar"
            class="h-2 bg-green-500 rounded-full"
            style="width: 0%"
          >
          </div>
        </div>
      </div>
    </div>

    <div class="mt-6">
      <h3 class="text-lg font-medium text-gray-800 dark:text-white mb-3">
        Performance by Device Type
      </h3>
      <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
          <thead class="bg-gray-50 dark:bg-gray-700">
            <tr>
              <th
                scope="col"
                class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider"
                >Device</th
              >
              <th
                scope="col"
                class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider"
                >LCP</th
              >
              <th
                scope="col"
                class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider"
                >FID</th
              >
              <th
                scope="col"
                class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider"
                >CLS</th
              >
              <th
                scope="col"
                class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider"
                >Users</th
              >
            </tr>
          </thead>
          <tbody
            id="device-metrics"
            class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700"
          >
            <tr>
              <td
                colspan="5"
                class="px-6 py-4 text-center text-gray-500 dark:text-gray-400"
                >Loading data...</td
              >
            </tr>
          </tbody>
        </table>
      </div>
    </div>
  </div>
</div>

<script define:vars={{ refreshInterval }}>
  // Simulated data - in a real app, this would come from your RUM service
  function getRandomMetrics() {
    return {
      lcp: {
        value: Math.random() * 3000 + 1000, // 1000-4000ms
        rating: ['good', 'needs-improvement', 'poor'][
          Math.floor(Math.random() * 3)
        ],
      },
      fid: {
        value: Math.random() * 200 + 50, // 50-250ms
        rating: ['good', 'needs-improvement', 'poor'][
          Math.floor(Math.random() * 3)
        ],
      },
      cls: {
        value: Math.random() * 0.25, // 0-0.25
        rating: ['good', 'needs-improvement', 'poor'][
          Math.floor(Math.random() * 3)
        ],
      },
      devices: [
        {
          name: 'Desktop',
          lcp: Math.random() * 3000 + 800,
          fid: Math.random() * 150 + 30,
          cls: Math.random() * 0.15,
          users: Math.floor(Math.random() * 10000),
        },
        {
          name: 'Mobile',
          lcp: Math.random() * 4000 + 1200,
          fid: Math.random() * 200 + 50,
          cls: Math.random() * 0.2,
          users: Math.floor(Math.random() * 8000),
        },
        {
          name: 'Tablet',
          lcp: Math.random() * 3500 + 1000,
          fid: Math.random() * 180 + 40,
          cls: Math.random() * 0.18,
          users: Math.floor(Math.random() * 2000),
        },
      ],
    }
  }

  function getRatingColor(metric, value) {
    if (metric === 'lcp') {
      return value <= 2500
        ? 'bg-green-500'
        : value <= 4000
          ? 'bg-yellow-500'
          : 'bg-red-500'
    } else if (metric === 'fid') {
      return value <= 100
        ? 'bg-green-500'
        : value <= 300
          ? 'bg-yellow-500'
          : 'bg-red-500'
    } else if (metric === 'cls') {
      return value <= 0.1
        ? 'bg-green-500'
        : value <= 0.25
          ? 'bg-yellow-500'
          : 'bg-red-500'
    }
    return 'bg-gray-500'
  }

  function getBarWidth(metric, value) {
    if (metric === 'lcp') {
      return Math.min(100, (value / 5000) * 100) + '%'
    } else if (metric === 'fid') {
      return Math.min(100, (value / 500) * 100) + '%'
    } else if (metric === 'cls') {
      return Math.min(100, (value / 0.5) * 100) + '%'
    }
    return '0%'
  }

  function formatValue(metric, value) {
    if (metric === 'lcp' || metric === 'fid') {
      return Math.round(value) + 'ms'
    } else if (metric === 'cls') {
      return value.toFixed(3)
    }
    return value
  }

  function updateUI(data) {
    // Update the main metrics
    document.getElementById('lcp-value').textContent = formatValue(
      'lcp',
      data.lcp.value,
    )
    document.getElementById('fid-value').textContent = formatValue(
      'fid',
      data.fid.value,
    )
    document.getElementById('cls-value').textContent = formatValue(
      'cls',
      data.cls.value,
    )

    // Update the bars
    const lcpBar = document.getElementById('lcp-bar')
    const fidBar = document.getElementById('fid-bar')
    const clsBar = document.getElementById('cls-bar')

    lcpBar.className = `h-2 rounded-full ${getRatingColor('lcp', data.lcp.value)}`
    lcpBar.style.width = getBarWidth('lcp', data.lcp.value)

    fidBar.className = `h-2 rounded-full ${getRatingColor('fid', data.fid.value)}`
    fidBar.style.width = getBarWidth('fid', data.fid.value)

    clsBar.className = `h-2 rounded-full ${getRatingColor('cls', data.cls.value)}`
    clsBar.style.width = getBarWidth('cls', data.cls.value)

    // Update the device metrics table
    const deviceMetricsEl = document.getElementById('device-metrics')
    deviceMetricsEl.innerHTML = ''

    data.devices.forEach((device) => {
      const row = document.createElement('tr')
      row.innerHTML = `
      <td class="px-6 py-4 whitespace-nowrap">
        <div class="text-sm font-medium text-gray-900 dark:text-white">${device.name}</div>
      </td>
      <td class="px-6 py-4 whitespace-nowrap">
        <div class="text-sm text-gray-900 dark:text-white ${getRatingColor('lcp', device.lcp).replace('bg-', 'text-')}">${formatValue('lcp', device.lcp)}</div>
      </td>
      <td class="px-6 py-4 whitespace-nowrap">
        <div class="text-sm text-gray-900 dark:text-white ${getRatingColor('fid', device.fid).replace('bg-', 'text-')}">${formatValue('fid', device.fid)}</div>
      </td>
      <td class="px-6 py-4 whitespace-nowrap">
        <div class="text-sm text-gray-900 dark:text-white ${getRatingColor('cls', device.cls).replace('bg-', 'text-')}">${formatValue('cls', device.cls)}</div>
      </td>
      <td class="px-6 py-4 whitespace-nowrap">
        <div class="text-sm text-gray-900 dark:text-white">${device.users.toLocaleString()}</div>
      </td>
    `
      deviceMetricsEl.appendChild(row)
    })
  }

  // Initial load
  updateUI(getRandomMetrics())

  // Set up refresh interval
  let refreshTimer = setInterval(() => {
    updateUI(getRandomMetrics())
  }, refreshInterval)

  // Handle refresh button click
  document.getElementById('refresh-button').addEventListener('click', () => {
    updateUI(getRandomMetrics())

    // Reset the interval
    clearInterval(refreshTimer)
    refreshTimer = setInterval(() => {
      updateUI(getRandomMetrics())
    }, refreshInterval)
  })

  // Clean up on page navigation
  document.addEventListener('astro:before-swap', () => {
    clearInterval(refreshTimer)
  })
</script>

<style>
  .rum-dashboard {
    transition:
      background-color 300ms ease-in-out,
      color 300ms ease-in-out,
      border-color 300ms ease-in-out;
  }

  .metric-card {
    border: 1px solid rgba(0, 0, 0, 0.1);
    transition: transform 0.2s ease-in-out;
  }

  .metric-card:hover {
    transform: translateY(-2px);
  }

  :global(.dark) .metric-card {
    border-color: rgba(255, 255, 255, 0.1);
  }

  .loading-placeholder {
    animation: pulse 1.5s infinite;
    color: #cbd5e0;
  }

  @keyframes pulse {
    0%,
    100% {
      opacity: 1;
    }
    50% {
      opacity: 0.5;
    }
  }

  .text-green-500 {
    color: #48bb78;
  }

  .text-yellow-500 {
    color: #ecc94b;
  }

  .text-red-500 {
    color: #f56565;
  }

  .text-gray-500 {
    color: #a0aec0;
  }
</style>
