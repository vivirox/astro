---
import { getLogger } from '../../lib/logging'

// Initialize logger
const logger = getLogger()

// User interface for TypeScript type safety
interface User {
  id: string
  name: string
  email: string
  role: string
  createdAt: Date
  lastActive: Date
}

// Mock data for initial rendering
// In a real implementation, this would be fetched from the server
const mockUsers: User[] = [
  {
    id: 'user-1',
    name: 'Dr. Jane Smith',
    email: 'jane.smith@example.com',
    role: 'therapist',
    createdAt: new Date(2024, 1, 15),
    lastActive: new Date(2024, 2, 28),
  },
  {
    id: 'user-2',
    name: 'John Doe',
    email: 'john.doe@example.com',
    role: 'client',
    createdAt: new Date(2024, 2, 5),
    lastActive: new Date(2024, 2, 29),
  },
  {
    id: 'user-3',
    name: 'Admin User',
    email: 'admin@example.com',
    role: 'admin',
    createdAt: new Date(2023, 11, 10),
    lastActive: new Date(2024, 2, 30),
  },
  {
    id: 'user-4',
    name: 'Dr. Michael Johnson',
    email: 'michael.johnson@example.com',
    role: 'therapist',
    createdAt: new Date(2024, 0, 20),
    lastActive: new Date(2024, 2, 25),
  },
  {
    id: 'user-5',
    name: 'Sarah Williams',
    email: 'sarah.williams@example.com',
    role: 'client',
    createdAt: new Date(2024, 2, 10),
    lastActive: new Date(2024, 2, 27),
  },
]

// Format date for display
const formatDate = (date: Date) => {
  return date.toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'short',
    day: 'numeric',
  })
}

// Mock pagination data
const pagination = {
  total: 45,
  limit: 10,
  offset: 0,
  hasMore: true,
}

// Attempt to fetch real users - in a real implementation, this would call an API
let users = mockUsers
let error: Error | null = null

try {
  logger.info('Fetching users for admin management')
  // In a real implementation, this would be:
  // users = await fetchUsers({ limit: pagination.limit, offset: pagination.offset });
} catch (e) {
  error = e instanceof Error ? e : new Error('Unknown error fetching users')
  logger.error('Error fetching users', { error })
}
---

<div class="user-management">
  <!-- Filters -->
  <div
    class="mb-6 flex flex-col md:flex-row md:items-center md:justify-between gap-4"
  >
    <div class="flex flex-col md:flex-row gap-4 md:items-center">
      <!-- Search input -->
      <div class="relative">
        <input
          type="text"
          class="pl-10 pr-4 py-2 rounded-lg border border-gray-300 dark:border-gray-700 bg-white dark:bg-gray-800 text-gray-800 dark:text-gray-200 w-full md:w-64"
          placeholder="Search users..."
          id="search-input"
        />
        <span
          class="material-symbols-outlined absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500 dark:text-gray-400"
        >
          search
        </span>
      </div>

      <!-- Role filter -->
      <div class="relative">
        <select
          class="pl-10 pr-4 py-2 rounded-lg border border-gray-300 dark:border-gray-700 bg-white dark:bg-gray-800 text-gray-800 dark:text-gray-200"
          id="role-filter"
        >
          <option value="">All Roles</option>
          <option value="therapist">Therapists</option>
          <option value="client">Clients</option>
          <option value="admin">Admins</option>
        </select>
        <span
          class="material-symbols-outlined absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500 dark:text-gray-400"
        >
          filter_list
        </span>
      </div>
    </div>

    <!-- Add user button -->
    <button
      class="flex items-center justify-center px-4 py-2 rounded-lg bg-purple-600 hover:bg-purple-700 text-white"
      id="add-user-btn"
    >
      <span class="material-symbols-outlined mr-2">add</span>
      Add User
    </button>
  </div>

  {
    error && (
      <div class="mb-6 p-4 bg-red-100 dark:bg-red-900 text-red-800 dark:text-red-200 rounded-lg">
        <p class="flex items-center">
          <span class="material-symbols-outlined mr-2">error</span>
          Error loading users: {error.message}
        </p>
        <p class="mt-2 text-sm">
          Please try refreshing the page or contact support if the problem
          persists.
        </p>
      </div>
    )
  }

  <!-- Users table -->
  <div
    class="overflow-x-auto rounded-lg border border-gray-300 dark:border-gray-700"
  >
    <table class="min-w-full bg-white dark:bg-gray-800">
      <thead class="bg-gray-100 dark:bg-gray-700">
        <tr>
          <th
            class="py-3 px-4 text-left text-sm font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider"
          >
            Name
          </th>
          <th
            class="py-3 px-4 text-left text-sm font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider"
          >
            Email
          </th>
          <th
            class="py-3 px-4 text-left text-sm font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider"
          >
            Role
          </th>
          <th
            class="py-3 px-4 text-left text-sm font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider"
          >
            Created
          </th>
          <th
            class="py-3 px-4 text-left text-sm font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider"
          >
            Last Active
          </th>
          <th
            class="py-3 px-4 text-left text-sm font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider"
          >
            Actions
          </th>
        </tr>
      </thead>
      <tbody
        class="divide-y divide-gray-200 dark:divide-gray-700"
        id="users-table-body"
      >
        {
          users.map((user) => (
            <tr
              class="hover:bg-gray-50 dark:hover:bg-gray-800 cursor-pointer"
              data-user-id={user.id}
            >
              <td class="py-4 px-6 text-sm text-gray-800 dark:text-gray-200">
                {user.name}
              </td>
              <td class="py-4 px-6 text-sm text-gray-800 dark:text-gray-200">
                {user.email}
              </td>
              <td class="py-4 px-6 text-sm">
                <span
                  class={`px-2 py-1 rounded-full text-xs font-medium ${
                    user.role === 'therapist'
                      ? 'bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200'
                      : user.role === 'admin'
                        ? 'bg-purple-100 dark:bg-purple-900 text-purple-800 dark:text-purple-200'
                        : 'bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200'
                  }`}
                >
                  {user.role.charAt(0).toUpperCase() + user.role.slice(1)}
                </span>
              </td>
              <td class="py-4 px-6 text-sm text-gray-800 dark:text-gray-200">
                {formatDate(user.createdAt)}
              </td>
              <td class="py-4 px-6 text-sm text-gray-800 dark:text-gray-200">
                {formatDate(user.lastActive)}
              </td>
              <td class="py-4 px-6 text-sm">
                <div class="flex space-x-2">
                  <button
                    class="text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 edit-user-btn"
                    data-user-id={user.id}
                    aria-label={`Edit ${user.name}`}
                  >
                    <span class="material-symbols-outlined">edit</span>
                  </button>
                  <button
                    class="text-red-600 dark:text-red-400 hover:text-red-800 dark:hover:text-red-300 delete-user-btn"
                    data-user-id={user.id}
                    aria-label={`Delete ${user.name}`}
                  >
                    <span class="material-symbols-outlined">delete</span>
                  </button>
                </div>
              </td>
            </tr>
          ))
        }
      </tbody>
    </table>
  </div>

  <!-- Pagination -->
  <div class="mt-6 flex justify-between items-center">
    <div
      class="text-sm text-gray-600 dark:text-gray-400"
      id="pagination-summary"
    >
      Showing 1 to {users.length} of {pagination.total} users
    </div>
    <div class="flex space-x-2">
      <button
        class="px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-700 bg-white dark:bg-gray-800 text-gray-800 dark:text-gray-200 disabled:opacity-50"
        id="prev-page-btn"
        disabled={pagination.offset === 0}
        aria-label="Previous page"
      >
        Previous
      </button>
      <button
        class="px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-700 bg-white dark:bg-gray-800 text-gray-800 dark:text-gray-200 disabled:opacity-50"
        id="next-page-btn"
        disabled={!pagination.hasMore}
        aria-label="Next page"
      >
        Next
      </button>
    </div>
  </div>

  <!-- User modal template (hidden by default) -->
  <div
    class="fixed inset-0 flex items-center justify-center z-50 bg-black bg-opacity-50"
    id="user-modal"
  >
    <div
      class="bg-white dark:bg-gray-800 rounded-lg shadow-lg max-w-2xl w-full m-4"
      role="dialog"
      aria-labelledby="modal-title"
    >
      <!-- Modal header -->
      <div
        class="flex justify-between items-center p-6 border-b border-gray-200 dark:border-gray-700"
      >
        <h3
          class="text-lg font-semibold text-gray-800 dark:text-gray-200"
          id="modal-title"
        >
          Edit User
        </h3>
        <button
          class="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200"
          id="close-modal-btn"
          aria-label="Close modal"
        >
          <span class="material-symbols-outlined">close</span>
        </button>
      </div>
      <!-- Modal body -->
      <div class="p-6">
        <form class="space-y-4" id="user-form">
          <input type="hidden" id="user-id-input" />
          <div>
            <label
              class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
              for="user-name-input"
            >
              Name
            </label>
            <input
              type="text"
              id="user-name-input"
              class="w-full px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-700 bg-white dark:bg-gray-800 text-gray-800 dark:text-gray-200"
              required
            />
          </div>
          <div>
            <label
              class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
              for="user-email-input"
            >
              Email
            </label>
            <input
              type="email"
              id="user-email-input"
              class="w-full px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-700 bg-white dark:bg-gray-800 text-gray-800 dark:text-gray-200"
              required
            />
          </div>
          <div>
            <label
              class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
              for="user-role-input"
            >
              Role
            </label>
            <select
              id="user-role-input"
              class="w-full px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-700 bg-white dark:bg-gray-800 text-gray-800 dark:text-gray-200"
              required
            >
              <option value="client">Client</option>
              <option value="therapist">Therapist</option>
              <option value="admin">Admin</option>
            </select>
          </div>
        </form>
      </div>
      <!-- Modal footer -->
      <div
        class="flex justify-end p-6 border-t border-gray-200 dark:border-gray-700 gap-4"
      >
        <button
          class="px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-700 bg-white dark:bg-gray-800 text-gray-800 dark:text-gray-200"
          id="cancel-btn"
        >
          Cancel
        </button>
        <button
          class="px-4 py-2 rounded-lg bg-purple-600 hover:bg-purple-700 text-white"
          id="save-user-btn"
        >
          Save Changes
        </button>
      </div>
    </div>
  </div>
</div>

<script>
  // Define User interface for script section
  interface User {
    id: string
    name: string
    email: string
    role: string
    createdAt: Date
    lastActive: Date
  }

  // Client-side JavaScript for modal interactions and filtering
  document.addEventListener('DOMContentLoaded', () => {
    // DOM elements
    const userModal = document.getElementById(
      'user-modal',
    ) as HTMLDivElement | null
    const modalTitle = document.getElementById(
      'modal-title',
    ) as HTMLHeadingElement | null
    const userForm = document.getElementById(
      'user-form',
    ) as HTMLFormElement | null
    const userIdInput = document.getElementById(
      'user-id-input',
    ) as HTMLInputElement | null
    const userNameInput = document.getElementById(
      'user-name-input',
    ) as HTMLInputElement | null
    const userEmailInput = document.getElementById(
      'user-email-input',
    ) as HTMLInputElement | null
    const userRoleInput = document.getElementById(
      'user-role-input',
    ) as HTMLSelectElement | null
    const searchInput = document.getElementById(
      'search-input',
    ) as HTMLInputElement | null
    const roleFilter = document.getElementById(
      'role-filter',
    ) as HTMLSelectElement | null
    const userTableRows = document.querySelectorAll('#users-table-body tr')
    const prevPageBtn = document.getElementById(
      'prev-page-btn',
    ) as HTMLButtonElement | null
    const nextPageBtn = document.getElementById(
      'next-page-btn',
    ) as HTMLButtonElement | null
    const addUserBtn = document.getElementById(
      'add-user-btn',
    ) as HTMLButtonElement | null
    const closeModalBtn = document.getElementById(
      'close-modal-btn',
    ) as HTMLButtonElement | null
    const cancelBtn = document.getElementById(
      'cancel-btn',
    ) as HTMLButtonElement | null
    const saveUserBtn = document.getElementById(
      'save-user-btn',
    ) as HTMLButtonElement | null
    const editUserBtns = document.querySelectorAll('.edit-user-btn')
    const deleteUserBtns = document.querySelectorAll('.delete-user-btn')

    // Error handling utilities
    const showError = (message: string): void => {
      const errorContainer = document.createElement('div')
      errorContainer.className =
        'p-4 mb-4 bg-red-100 dark:bg-red-900 text-red-800 dark:text-red-200 rounded-lg fixed top-4 right-4 z-50'
      errorContainer.innerHTML = `
        <div class="flex items-center">
          <span class="material-symbols-outlined mr-2">error</span>
          <span>${message}</span>
          <button class="ml-4 text-red-800 dark:text-red-200" aria-label="Dismiss">
            <span class="material-symbols-outlined">close</span>
          </button>
        </div>
      `
      document.body.appendChild(errorContainer)

      // Automatically dismiss after 5 seconds
      setTimeout(() => {
        errorContainer.remove()
      }, 5000)

      // Dismiss on click
      const dismissBtn = errorContainer.querySelector('button')
      if (dismissBtn) {
        dismissBtn.addEventListener('click', () => {
          errorContainer.remove()
        })
      }
    }

    // User management operations - API calls would go here in real implementation
    interface UserData {
      id?: string
      name: string
      email: string
      role: string
    }

    // In a real implementation these would call API endpoints
    const apiOperations = {
      async createUser(userData: UserData): Promise<User> {
        try {
          // Mock API call
          console.log('Creating user:', userData)
          return {
            ...userData,
            id: `user-${Date.now()}`,
            createdAt: new Date(),
            lastActive: new Date(),
          } as User
        } catch (error) {
          console.error('Error creating user:', error)
          throw new Error('Failed to create user. Please try again.')
        }
      },

      async updateUser(userData: UserData): Promise<User> {
        try {
          // Mock API call
          console.log('Updating user:', userData)
          return {
            ...userData,
            createdAt: new Date(),
            lastActive: new Date(),
          } as User
        } catch (error) {
          console.error('Error updating user:', error)
          throw new Error('Failed to update user. Please try again.')
        }
      },

      async deleteUser(userId: string): Promise<void> {
        try {
          // Mock API call
          console.log('Deleting user:', userId)
        } catch (error) {
          console.error('Error deleting user:', error)
          throw new Error('Failed to delete user. Please try again.')
        }
      },
    }

    // Open modal with user data
    function openUserModal(userId: string): void {
      if (!userModal) return

      try {
        // Find the user data from the row
        const userRow = document.querySelector(`tr[data-user-id="${userId}"]`)
        if (!userRow) throw new Error(`User with ID ${userId} not found`)

        const nameCell = userRow.querySelector('td:nth-child(1)')
        const emailCell = userRow.querySelector('td:nth-child(2)')
        const roleSpan = userRow.querySelector('td:nth-child(3) span')

        if (!nameCell || !emailCell || !roleSpan)
          throw new Error('Failed to extract user data from table')

        const userData = {
          id: userId,
          name: nameCell.textContent?.trim() || '',
          email: emailCell.textContent?.trim() || '',
          role: (roleSpan.textContent?.trim() || '').toLowerCase(),
        }

        // Set modal fields
        if (modalTitle) {
          modalTitle.textContent = `Edit User: ${userData.name}`
        }
        if (userIdInput) {
          userIdInput.value = userData.id
        }
        if (userNameInput) {
          userNameInput.value = userData.name
        }
        if (userEmailInput) {
          userEmailInput.value = userData.email
        }
        if (userRoleInput) {
          const roleValue =
            userData.role === 'admin'
              ? 'admin'
              : userData.role === 'therapist'
                ? 'therapist'
                : 'client'
          userRoleInput.value = roleValue
        }

        // Show modal
        userModal.classList.remove('hidden')
      } catch (error) {
        console.error('Error opening user modal:', error)
        showError(
          error instanceof Error ? error.message : 'An unknown error occurred',
        )
      }
    }

    // Open modal for new user
    function openNewUserModal(): void {
      if (!userModal) return

      try {
        // Reset form
        if (modalTitle) {
          modalTitle.textContent = 'Add New User'
        }
        if (userForm) {
          userForm.reset()
        }
        if (userIdInput) {
          userIdInput.value = ''
        }

        // Show modal
        userModal.classList.remove('hidden')
      } catch (error) {
        console.error('Error opening new user modal:', error)
        showError(
          error instanceof Error ? error.message : 'An unknown error occurred',
        )
      }
    }

    // Close modal
    function closeModal(): void {
      if (!userModal) return
      userModal.classList.add('hidden')
    }

    // Save user (create or update)
    async function saveUser(): Promise<void> {
      if (
        !userForm ||
        !userIdInput ||
        !userNameInput ||
        !userEmailInput ||
        !userRoleInput
      )
        return

      try {
        // Form validation
        if (!userForm.checkValidity()) {
          userForm.reportValidity()
          return
        }

        const userData: UserData = {
          name: userNameInput.value,
          email: userEmailInput.value,
          role: userRoleInput.value,
        }

        const userId = userIdInput.value
        let result

        if (userId) {
          // Update existing user
          userData.id = userId
          result = await apiOperations.updateUser(userData)
          // In a real app, we would update the table row here
        } else {
          // Create new user
          result = await apiOperations.createUser(userData)
          // In a real app, we would add a new row to the table
        }

        // Close modal and notify
        closeModal()

        // Show success message and reload data in real app
        alert(`User ${userId ? 'updated' : 'created'} successfully!`)
        // In a real app, refresh data or update UI
      } catch (error) {
        console.error('Error saving user:', error)
        showError(
          error instanceof Error ? error.message : 'Failed to save user',
        )
      }
    }

    // Delete user
    async function deleteUser(userId: string): Promise<void> {
      try {
        if (!confirm('Are you sure you want to delete this user?')) return

        await apiOperations.deleteUser(userId)

        // In a real app, remove from table or refresh data
        alert(`User ${userId} deleted successfully!`)
      } catch (error) {
        console.error('Error deleting user:', error)
        showError(
          error instanceof Error ? error.message : 'Failed to delete user',
        )
      }
    }

    // Filter users based on search and role filter
    function filterUsers(): void {
      const searchTerm = searchInput?.value.toLowerCase() || ''
      const roleValue = roleFilter?.value.toLowerCase() || ''

      userTableRows.forEach((row) => {
        const nameCell = row.querySelector('td:nth-child(1)')
        const emailCell = row.querySelector('td:nth-child(2)')
        const roleSpan = row.querySelector('td:nth-child(3) span')

        if (!nameCell || !emailCell || !roleSpan) return

        const userName = nameCell.textContent?.toLowerCase() || ''
        const userEmail = emailCell.textContent?.toLowerCase() || ''
        const userRole = roleSpan.textContent?.toLowerCase() || ''

        const matchesSearch =
          userName.includes(searchTerm) || userEmail.includes(searchTerm)
        const matchesRole = roleValue === '' || userRole.includes(roleValue)

        if (matchesSearch && matchesRole) {
          row.classList.remove('hidden')
        } else {
          row.classList.add('hidden')
        }
      })

      // Update pagination summary
      updatePaginationSummary()
    }

    // Update pagination summary text
    function updatePaginationSummary(): void {
      const paginationSummary = document.getElementById('pagination-summary')
      if (!paginationSummary) return

      const visibleRows = document.querySelectorAll(
        '#users-table-body tr:not(.hidden)',
      )
      const total = 45 // Mock total, would come from server

      paginationSummary.textContent = `Showing 1 to ${visibleRows.length} of ${total} users`
    }

    // Event listeners
    if (searchInput) {
      searchInput.addEventListener('input', filterUsers)
    }

    if (roleFilter) {
      roleFilter.addEventListener('change', filterUsers)
    }

    if (addUserBtn) {
      addUserBtn.addEventListener('click', openNewUserModal)
    }

    if (closeModalBtn) {
      closeModalBtn.addEventListener('click', closeModal)
    }

    if (cancelBtn) {
      cancelBtn.addEventListener('click', closeModal)
    }

    if (saveUserBtn) {
      saveUserBtn.addEventListener('click', saveUser)
    }

    // Add click event to all edit buttons
    editUserBtns.forEach((btn) => {
      btn.addEventListener('click', (e) => {
        e.stopPropagation()
        const userId = btn.getAttribute('data-user-id')
        if (userId) {
          openUserModal(userId)
        }
      })
    })

    // Add click event to all delete buttons
    deleteUserBtns.forEach((btn) => {
      btn.addEventListener('click', (e) => {
        e.stopPropagation()
        const userId = btn.getAttribute('data-user-id')
        if (userId) {
          deleteUser(userId)
        }
      })
    })

    // Add click event to table rows
    userTableRows.forEach((row) => {
      row.addEventListener('click', () => {
        const userId = row.getAttribute('data-user-id')
        if (userId) {
          openUserModal(userId)
        }
      })
    })

    // Pagination buttons
    if (prevPageBtn) {
      prevPageBtn.addEventListener('click', () => {
        // In a real implementation, this would fetch the previous page
        alert('Previous page would be fetched from the server')
      })
    }

    if (nextPageBtn) {
      nextPageBtn.addEventListener('click', () => {
        // In a real implementation, this would fetch the next page
        alert('Next page would be fetched from the server')
      })
    }

    // Handle modal clicks to prevent closing when clicking inside the modal content
    if (userModal) {
      userModal.addEventListener('click', (e) => {
        if (e.target === userModal) {
          closeModal()
        }
      })
    }

    // Handle keyboard events (ESC to close modal)
    document.addEventListener('keydown', (e) => {
      if (
        e.key === 'Escape' &&
        userModal &&
        !userModal.classList.contains('hidden')
      ) {
        closeModal()
      }
    })
  })
</script>
