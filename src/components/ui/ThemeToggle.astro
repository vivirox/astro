---
import { UI } from '../../config';

interface Props {
  class?: string;
}

const { class: className = '' } = Astro.props;
---

<button
  id="theme-toggle"
  type="button"
  class={`p-2 rounded-md hover:bg-gray-100 dark:hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-blue-500 ${className}`}
  aria-label="Toggle theme"
>
  {
    UI.theme.toggleIcon && (
      <>
        <svg
          id="sun-icon"
          class="w-5 h-5 hidden"
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"
          />
        </svg>
        <svg
          id="moon-icon"
          class="w-5 h-5 hidden"
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"
          />
        </svg>
        <svg
          id="system-icon"
          class="w-5 h-5 hidden"
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"
          />
        </svg>
      </>
    )
  }
</button>

<script>
  // Theme toggle functionality
  const themeToggle = document.getElementById('theme-toggle');
  const sunIcon = document.getElementById('sun-icon');
  const moonIcon = document.getElementById('moon-icon');
  const systemIcon = document.getElementById('system-icon');

  // Function to set theme
  function setTheme(theme: 'light' | 'dark' | 'system') {
    localStorage.setItem('theme', theme);

    if (theme === 'system') {
      const systemTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
      document.documentElement.classList.toggle('dark', systemTheme === 'dark');
    } else {
      document.documentElement.classList.toggle('dark', theme === 'dark');
    }

    // Update icons
    if (sunIcon && moonIcon && systemIcon) {
      sunIcon.classList.toggle('hidden', theme !== 'light');
      moonIcon.classList.toggle('hidden', theme !== 'dark');
      systemIcon.classList.toggle('hidden', theme !== 'system');
    }
  }

  // Initialize theme
  const savedTheme = localStorage.getItem('theme') as 'light' | 'dark' | 'system' || 'system';
  setTheme(savedTheme);

  // Toggle theme on click
  themeToggle?.addEventListener('click', () => {
    const currentTheme = localStorage.getItem('theme') || 'system';

    // Cycle through themes: system -> light -> dark -> system
    if (currentTheme === 'system') {
      setTheme('light');
    } else if (currentTheme === 'light') {
      setTheme('dark');
    } else {
      setTheme('system');
    }
  });

  // Listen for system preference changes
  window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', () => {
    const currentTheme = localStorage.getItem('theme') || 'system';
    if (currentTheme === 'system') {
      setTheme('system');
    }
  });
</script>

<style>
  /* Smooth transition for theme changes */
  :global(html) {
    transition: background-color 0.3s ease, color 0.3s ease;
  }
</style>