---
import AdminLayout from '../../layouts/AdminLayout.astro'
import SecuritySettingsPanel from '../../components/admin/SecuritySettingsPanel.astro'
import { protectRoute } from '../../lib/auth/serverAuth'

// Mark this page for server-side rendering
export const prerender = false;

// Check permissions before rendering
const authResult = protectRoute(Astro, ['admin'], {})

// If protection result is a Response (redirect), return it
if (authResult instanceof Response) {
  return authResult
}
---

<AdminLayout title="Security Settings | Admin Dashboard">
  <div class="container">
    <header class="page-header">
      <h1>Security Settings</h1>
      <p class="subtitle">Manage authentication security and suspicious activity notifications</p>
    </header>
    
    <div class="dashboard-content">
      <SecuritySettingsPanel title="Email Security Alerts" />
      
      <div class="security-stats">
        <div class="stat-card">
          <h3>Failed Login Attempts</h3>
          <div class="stat-value">147</div>
          <p class="stat-description">Last 7 days</p>
        </div>
        
        <div class="stat-card">
          <h3>Suspicious Activities</h3>
          <div class="stat-value">12</div>
          <p class="stat-description">Last 7 days</p>
        </div>
        
        <div class="stat-card">
          <h3>Account Lockouts</h3>
          <div class="stat-value">3</div>
          <p class="stat-description">Last 7 days</p>
        </div>
        
        <div class="stat-card">
          <h3>Security Alerts Sent</h3>
          <div class="stat-value">15</div>
          <p class="stat-description">Last 7 days</p>
        </div>
      </div>
      
      <div class="security-actions">
        <h2>Security Actions</h2>
        <div class="action-buttons">
          <button id="test-supabase-alerts" class="action-button">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M22 2L11 13M22 2l-7 20-4-9-9-4 20-7z"/></svg>
            Test Supabase Alerts
          </button>
          
          <button id="sync-security-settings" class="action-button">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M21 12a9 9 0 0 1-9 9m9-9a9 9 0 0 0-9-9m9 9H3m9 9a9 9 0 0 1-9-9m9 9c-2.5 0-4.5-2-4.5-4.5S9.5 12 12 12s4.5 2 4.5 4.5S14.5 21 12 21z"/></svg>
            Sync Security Settings
          </button>
          
          <button id="clear-lockouts" class="action-button">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="3" y="11" width="18" height="11" rx="2" ry="2"></rect><path d="M7 11V7a5 5 0 0 1 10 0v4"></path></svg>
            Clear Account Lockouts
          </button>
          
          <button id="view-security-logs" class="action-button">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path><polyline points="14 2 14 8 20 8"></polyline><line x1="16" y1="13" x2="8" y2="13"></line><line x1="16" y1="17" x2="8" y2="17"></line><polyline points="10 9 9 9 8 9"></polyline></svg>
            View Security Logs
          </button>
        </div>
      </div>
    </div>
  </div>
</AdminLayout>

<script>
  // Client-side functionality
  document.addEventListener('DOMContentLoaded', () => {
    // Test Supabase Alerts button
    const testAlertsButton = document.getElementById('test-supabase-alerts');
    testAlertsButton?.addEventListener('click', async () => {
      try {
        const response = await fetch('/api/admin/test-security-alert', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ alertType: 'suspicious_login' }),
        });
        
        if (!response.ok) {
          throw new Error('Failed to test security alerts');
        }
        
        alert('Security alert test sent successfully!');
      } catch (error) {
        const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred';
        alert(`Error: ${errorMessage}`);
      }
    });
    
    // Sync Security Settings button
    const syncSettingsButton = document.getElementById('sync-security-settings');
    syncSettingsButton?.addEventListener('click', async () => {
      try {
        const response = await fetch('/api/admin/sync-security-settings', {
          method: 'POST',
        });
        
        if (!response.ok) {
          throw new Error('Failed to sync security settings');
        }
        
        alert('Security settings synced successfully!');
      } catch (error) {
        const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred';
        alert(`Error: ${errorMessage}`);
      }
    });
    
    // Clear Account Lockouts button
    const clearLockoutsButton = document.getElementById('clear-lockouts');
    clearLockoutsButton?.addEventListener('click', async () => {
      if (!confirm('Are you sure you want to clear all account lockouts?')) {
        return;
      }
      
      try {
        const response = await fetch('/api/admin/clear-lockouts', {
          method: 'POST',
        });
        
        if (!response.ok) {
          throw new Error('Failed to clear account lockouts');
        }
        
        alert('Account lockouts cleared successfully!');
      } catch (error) {
        const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred';
        alert(`Error: ${errorMessage}`);
      }
    });
    
    // View Security Logs button
    const viewLogsButton = document.getElementById('view-security-logs');
    viewLogsButton?.addEventListener('click', () => {
      window.location.href = '/admin/security-logs';
    });
  });
</script>

<style>
  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
  }
  
  .page-header {
    margin-bottom: 2rem;
  }
  
  .page-header h1 {
    margin: 0 0 0.5rem 0;
    font-size: 2rem;
    color: #333;
  }
  
  .subtitle {
    margin: 0;
    color: #666;
    font-size: 1.1rem;
  }
  
  .dashboard-content {
    display: flex;
    flex-direction: column;
    gap: 2rem;
  }
  
  .security-stats {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));
    gap: 1.5rem;
    margin-top: 1rem;
  }
  
  .stat-card {
    background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    padding: 1.5rem;
    display: flex;
    flex-direction: column;
  }
  
  .stat-card h3 {
    margin: 0 0 1rem 0;
    font-size: 1rem;
    color: #666;
    font-weight: 500;
  }
  
  .stat-value {
    font-size: 2.5rem;
    font-weight: 700;
    color: #0066cc;
    margin-bottom: 0.5rem;
  }
  
  .stat-description {
    margin: 0;
    font-size: 0.85rem;
    color: #888;
  }
  
  .security-actions {
    margin-top: 1rem;
  }
  
  .security-actions h2 {
    margin: 0 0 1rem 0;
    font-size: 1.5rem;
    color: #333;
  }
  
  .action-buttons {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));
    gap: 1rem;
  }
  
  .action-button {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 1rem;
    background-color: #fff;
    border: 1px solid #ddd;
    border-radius: 8px;
    font-size: 1rem;
    color: #333;
    cursor: pointer;
    transition: all 0.2s;
  }
  
  .action-button:hover {
    background-color: #f9f9f9;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    transform: translateY(-2px);
  }
  
  .action-button svg {
    width: 20px;
    height: 20px;
    color: #0066cc;
  }
  
  @media (max-width: 768px) {
    .container {
      padding: 1rem;
    }
    
    .security-stats {
      grid-template-columns: 1fr;
    }
    
    .action-buttons {
      grid-template-columns: 1fr;
    }
  }
</style>