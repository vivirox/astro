---




---

<ChatLayout title="Browser Compatibility Testing">
  <div class="container">
    <h1>Browser Compatibility Testing Dashboard</h1>
    <p>
      This page tests critical AI components across different browsers to ensure consistent functionality and accessibility.
      Run this page in Chrome, Firefox, Safari, and Edge to verify compatibility.
    </p>

    <section class="test-section">
      <h2>Browser Information</h2>
      <BrowserCompatibilityTester client:load />
    </section>

    <section class="test-section">
      <h2>AI Chat Component Test</h2>
      <div class="component-test">
        <h3>Test Instructions</h3>
        <ul>
          <li>Verify that the chat interface loads correctly</li>
          <li>Test keyboard navigation (Tab, Enter, Arrow keys)</li>
          <li>Test screen reader compatibility</li>
          <li>Verify that messages display correctly</li>
          <li>Test sending and receiving messages</li>
          <li>Verify loading states and animations</li>
          <li>Test with reduced motion preference if available</li>
          <li>Test with high contrast mode if available</li>
        </ul>
        <div class="component-container">
          <AIChat client:load />
        </div>
      </div>
    </section>

    <section class="test-section">
      <h2>Loading Indicator Test</h2>
      <div class="component-test">
        <h3>Test Instructions</h3>
        <ul>
          <li>Verify that loading indicators display correctly</li>
          <li>Test with screen readers to verify announcements</li>
          <li>Test with reduced motion preference if available</li>
          <li>Verify that animations work correctly</li>
        </ul>
        <div class="loading-indicators-test">
          <div>
            <h4>Small</h4>
            <AccessibleLoadingIndicator size="small" message="Loading small..." client:load />
          </div>
          <div>
            <h4>Medium</h4>
            <AccessibleLoadingIndicator size="medium" message="Loading medium..." client:load />
          </div>
          <div>
            <h4>Large</h4>
            <AccessibleLoadingIndicator size="large" message="Loading large..." client:load />
          </div>
        </div>
      </div>
    </section>

    <section class="test-section">
      <h2>Compatibility Issues Log</h2>
      <div class="compatibility-log">
        <form id="compatibility-form" class="compatibility-form">
          <div class="form-group">
            <label for="browser">Browser</label>
            <input type="text" id="browser" name="browser" required />
          </div>
          <div class="form-group">
            <label for="component">Component</label>
            <select id="component" name="component" required>
              <option value="">Select a component</option>
              <option value="ai-chat">AI Chat</option>
              <option value="loading-indicator">Loading Indicator</option>
              <option value="other">Other</option>
            </select>
          </div>
          <div class="form-group">
            <label for="issue">Issue Description</label>
            <textarea id="issue" name="issue" rows="4" required></textarea>
          </div>
          <div class="form-group">
            <label for="severity">Severity</label>
            <select id="severity" name="severity" required>
              <option value="">Select severity</option>
              <option value="critical">Critical - Blocking functionality</option>
              <option value="major">Major - Significant impact</option>
              <option value="minor">Minor - Cosmetic issues</option>
            </select>
          </div>
          <div class="form-actions">
            <button type="submit" class="btn btn-primary">Log Issue</button>
          </div>
        </form>

        <div class="issues-list">
          <h3>Reported Issues</h3>
          <div id="issues-container">
            <p>No issues reported yet.</p>
          </div>
        </div>
      </div>
    </section>
  </div>
</ChatLayout>

<script>
  // Client-side script to handle form submission and display issues
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('compatibility-form') as HTMLFormElement;
    const issuesContainer = document.getElementById('issues-container') as HTMLDivElement;

    if (!form || !issuesContainer) {
      console.error('Required elements not found');
      return;
    }

    // Load existing issues from localStorage
    const loadIssues = () => {
      const issues = JSON.parse(localStorage.getItem('compatibility-issues') || '[]');
      if (issues.length === 0) {
        issuesContainer.innerHTML = '<p>No issues reported yet.</p>';
        return;
      }

      issuesContainer.innerHTML = '';
      issues.forEach((issue: any, index: number) => {
        const issueElement = document.createElement('div');
        issueElement.className = 'issue-item';
        issueElement.innerHTML = `
          <div class="issue-header">
            <span class="issue-browser">${issue.browser}</span>
            <span class="issue-component">${issue.component}</span>
            <span class="issue-severity ${issue.severity}">${issue.severity}</span>
          </div>
          <div class="issue-body">
            <p>${issue.issue}</p>
          </div>
          <div class="issue-actions">
            <button class="btn btn-sm btn-danger delete-issue" data-index="${index}">Delete</button>
          </div>
        `;
        issuesContainer.appendChild(issueElement);
      });

      // Add event listeners to delete buttons
      document.querySelectorAll('.delete-issue').forEach(button => {
        button.addEventListener('click', (e) => {
          const target = e.currentTarget as HTMLElement;
          if (!target) return;

          const index = parseInt(target.getAttribute('data-index') || '0');
          const issues = JSON.parse(localStorage.getItem('compatibility-issues') || '[]');
          issues.splice(index, 1);
          localStorage.setItem('compatibility-issues', JSON.stringify(issues));
          loadIssues();
        });
      });
    };

    // Handle form submission
    form.addEventListener('submit', (e) => {
      e.preventDefault();

      const formData = new FormData(form);
      const issue = {
        browser: formData.get('browser'),
        component: formData.get('component'),
        issue: formData.get('issue'),
        severity: formData.get('severity'),
        timestamp: new Date().toISOString()
      };

      // Save to localStorage
      const issues = JSON.parse(localStorage.getItem('compatibility-issues') || '[]');
      issues.push(issue);
      localStorage.setItem('compatibility-issues', JSON.stringify(issues));

      // Reset form and reload issues
      form.reset();
      loadIssues();
    });

    // Initial load
    loadIssues();

    // Pre-fill browser field with user agent info
    const browserInput = document.getElementById('browser') as HTMLInputElement;
    if (browserInput) {
      const ua = navigator.userAgent;
      let browserName = "Unknown";

      if (ua.includes("Firefox")) {
        browserName = "Firefox";
      } else if (ua.includes("SamsungBrowser")) {
        browserName = "Samsung Browser";
      } else if (ua.includes("Opera") || ua.includes("OPR")) {
        browserName = "Opera";
      } else if (ua.includes("Edg")) {
        browserName = "Edge";
      } else if (ua.includes("Chrome")) {
        browserName = "Chrome";
      } else if (ua.includes("Safari")) {
        browserName = "Safari";
      }

      browserInput.value = browserName;
    }
  });
</script>

<style>
  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
  }

  .test-section {
    margin-bottom: 3rem;
    padding: 1.5rem;
    border: 1px solid var(--border-color, #ddd);
    border-radius: 8px;
    background-color: var(--card-bg, #fff);
  }

  .component-test {
    margin-top: 1rem;
  }

  .component-container {
    margin-top: 1.5rem;
    padding: 1rem;
    border: 1px solid var(--border-color, #ddd);
    border-radius: 4px;
  }

  .loading-indicators-test {
    display: flex;
    gap: 2rem;
    margin-top: 1.5rem;
  }

  .compatibility-form {
    margin-bottom: 2rem;
  }

  .form-group {
    margin-bottom: 1rem;
  }

  .form-group label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: 500;
  }

  .form-group input,
  .form-group select,
  .form-group textarea {
    width: 100%;
    padding: 0.5rem;
    border: 1px solid var(--border-color, #ddd);
    border-radius: 4px;
  }

  .form-actions {
    margin-top: 1.5rem;
  }

  .btn {
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-weight: 500;
  }

  .btn-primary {
    background-color: var(--primary-color, #0066cc);
    color: white;
  }

  .btn-danger {
    background-color: var(--danger-color, #dc3545);
    color: white;
  }

  .btn-sm {
    padding: 0.25rem 0.5rem;
    font-size: 0.875rem;
  }

  .issue-item {
    margin-bottom: 1rem;
    padding: 1rem;
    border: 1px solid var(--border-color, #ddd);
    border-radius: 4px;
  }

  .issue-header {
    display: flex;
    justify-content: space-between;
    margin-bottom: 0.5rem;
  }

  .issue-severity {
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    font-size: 0.75rem;
    font-weight: 500;
  }

  .issue-severity.critical {
    background-color: var(--danger-color, #dc3545);
    color: white;
  }

  .issue-severity.major {
    background-color: var(--warning-color, #ffc107);
    color: black;
  }

  .issue-severity.minor {
    background-color: var(--info-color, #17a2b8);
    color: white;
  }

  .issue-actions {
    margin-top: 0.5rem;
    text-align: right;
  }

  @media (prefers-reduced-motion: reduce) {
    .loading-indicator {
      animation: none !important;
    }
  }

  @media (prefers-color-scheme: dark) {
    .test-section {
      border-color: var(--border-color-dark, #444);
      background-color: var(--card-bg-dark, #222);
    }
  }
</style>