---
import ChatLayout from '../../layouts/ChatLayout.astro';
import { BrowserCompatibilityTester } from '../../components/testing/BrowserCompatibilityTester';
import AIChat from '../../components/AIChat';

// Define size map outside component
const sizeMap = {
  small: { width: 50, height: 20 },
  medium: { width: 100, height: 30 },
  large: { width: 150, height: 40 },
};

---

<ChatLayout title="Browser Compatibility Testing">
  <div class="container">
    <h1>Browser Compatibility Testing Dashboard</h1>
    <p>
      This page tests critical AI components across different browsers to ensure
      consistent functionality and accessibility. Run this page in Chrome,
      Firefox, Safari, and Edge to verify compatibility.
    </p>

    <section class="test-section">
      <h2>Browser Information</h2>
      <BrowserCompatibilityTester client:load />
    </section>

    <section class="test-section">
      <h2>AI Chat Component Test</h2>
      <div class="component-test">
        <h3>Test Instructions</h3>
        <ul>
          <li>Verify that the chat interface loads correctly</li>
          <li>Test keyboard navigation (Tab, Enter, Arrow keys)</li>
          <li>Test screen reader compatibility</li>
          <li>Verify that messages display correctly</li>
          <li>Test sending and receiving messages</li>
          <li>Verify loading states and animations</li>
          <li>Test with reduced motion preference if available</li>
          <li>Test with high contrast mode if available</li>
        </ul>
        <div class="component-container">
          <AIChat client:load />
        </div>
      </div>
    </section>

    <section class="test-section">
      <h2>Loading Indicator Test</h2>
      <div class="component-test">
        <h3>Test Instructions</h3>
        <ul>
          <li>Verify that loading indicators display correctly</li>
          <li>Test with screen readers to verify announcements</li>
          <li>Test with reduced motion preference if available</li>
          <li>Verify that animations work correctly</li>
        </ul>
        <div class="loading-indicators-test">
          <div>
            <h4>Small</h4>
            <div class="loading-indicator" aria-live="polite">
              <div
                class="loading-skeleton"
                style={`width: ${sizeMap.small.width}px; height: ${sizeMap.small.height}px;`}
              ></div>
              <p class="loading-message">Loading small...</p>
            </div>
          </div>
          <div>
            <h4>Medium</h4>
            <div class="loading-indicator" aria-live="polite">
              <div
                class="loading-skeleton"
                style={`width: ${sizeMap.medium.width}px; height: ${sizeMap.medium.height}px;`}
              ></div>
              <p class="loading-message">Loading medium...</p>
            </div>
          </div>
          <div>
            <h4>Large</h4>
            <div class="loading-indicator" aria-live="polite">
              <div
                class="loading-skeleton"
                style={`width: ${sizeMap.large.width}px; height: ${sizeMap.large.height}px;`}
              ></div>
              <p class="loading-message">Loading large...</p>
            </div>
          </div>
        </div>
      </div>
    </section>

    <section class="test-section">
      <h2>Compatibility Issues Log</h2>
      <div class="compatibility-log">
        <form id="compatibility-form" class="compatibility-form">
          <div class="form-group">
            <label for="browser">Browser</label>
            <input type="text" id="browser" name="browser" required />
          </div>
          <div class="form-group">
            <label for="component">Component</label>
            <select id="component" name="component" required>
              <option value="">Select a component</option>
              <option value="ai-chat">AI Chat</option>
              <option value="loading-indicator">Loading Indicator</option>
              <option value="other">Other</option>
            </select>
          </div>
          <div class="form-group">
            <label for="issue">Issue Description</label>
            <textarea id="issue" name="issue" rows="4" required></textarea>
          </div>
          <div class="form-group">
            <label for="severity">Severity</label>
            <select id="severity" name="severity" required>
              <option value="">Select severity</option>
              <option value="critical">Critical - Blocking functionality</option
              >
              <option value="major">Major - Significant impact</option>
              <option value="minor">Minor - Cosmetic issues</option>
            </select>
          </div>
          <div class="form-actions">
            <button type="submit" class="btn btn-primary">Log Issue</button>
          </div>
        </form>

        <div class="issues-list">
          <h3>Reported Issues</h3>
          <div id="issues-container">
            <p>No issues reported yet.</p>
          </div>
        </div>
      </div>
    </section>
  </div>

  <style>
    .container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 20px;
    }

    .test-section {
      margin-bottom: 40px;
      padding: 20px;
      border: 1px solid var(--border-color);
      border-radius: 8px;
    }

    .component-test {
      margin-top: 20px;
    }

    .component-container {
      margin-top: 20px;
      border: 1px solid var(--border-color);
      border-radius: 4px;
      padding: 15px;
    }

    .loading-indicators-test {
      display: flex;
      gap: 20px;
      flex-wrap: wrap;
    }

    .loading-skeleton {
      background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
      background-size: 200% 100%;
      animation: loading 1.5s infinite;
      border-radius: 4px;
    }

    .compatibility-log {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 20px;
    }

    .compatibility-form {
      padding: 15px;
      border: 1px solid var(--border-color);
      border-radius: 4px;
    }

    .form-group {
      margin-bottom: 15px;
    }

    .form-group label {
      display: block;
      margin-bottom: 5px;
      font-weight: 500;
    }

    .form-group input,
    .form-group select,
    .form-group textarea {
      width: 100%;
      padding: 8px;
      border: 1px solid var(--input-border);
      border-radius: 4px;
    }

    .form-actions {
      margin-top: 20px;
    }

    .btn {
      padding: 8px 16px;
      border-radius: 4px;
      border: none;
      cursor: pointer;
    }

    .btn-primary {
      background-color: var(--primary);
      color: white;
    }

    .btn-danger {
      background-color: var(--error);
      color: white;
    }

    .btn-sm {
      padding: 4px 8px;
      font-size: 14px;
    }

    .issues-list {
      padding: 15px;
      border: 1px solid var(--border-color);
      border-radius: 4px;
    }

    .issue-item {
      padding: 10px;
      border: 1px solid var(--border-color);
      border-radius: 4px;
      margin-bottom: 10px;
    }

    .issue-header {
      display: flex;
      justify-content: space-between;
      margin-bottom: 5px;
    }

    .issue-severity {
      padding: 2px 6px;
      border-radius: 4px;
      font-size: 14px;
    }

    .critical {
      background-color: var(--error);
      color: white;
    }

    .major {
      background-color: var(--warning);
      color: black;
    }

    .minor {
      background-color: var(--info);
      color: white;
    }

    .issue-actions {
      margin-top: 10px;
      display: flex;
      justify-content: flex-end;
    }

    @keyframes loading {
      0% { background-position: 200% 0; }
      100% { background-position: -200% 0; }
    }

    @media (max-width: 768px) {
      .compatibility-log {
        grid-template-columns: 1fr;
      }
    }
  </style>
</ChatLayout>

<script>
  // Define the issue type
  interface Issue {
    browser: string;
    component: string;
    issue: string;
    severity: string;
    timestamp: string;
  }

  // Client-side script to handle form submission and display issues
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById(
      'compatibility-form'
    ) as HTMLFormElement
    const issuesContainer = document.getElementById(
      'issues-container'
    ) as HTMLDivElement

    if (!form || !issuesContainer) {
      console.error('Required elements not found')
      return
    }

    // Load existing issues from localStorage
    const loadIssues = () => {
      const issues = JSON.parse(
        localStorage.getItem('compatibility-issues') || '[]'
      )
      if (issues.length === 0) {
        issuesContainer.innerHTML = '<p>No issues reported yet.</p>'
        return
      }

      issuesContainer.innerHTML = ''
      issues.forEach((issue: Issue, index: number) => {
        const issueElement = document.createElement('div')
        issueElement.className = 'issue-item'
        issueElement.innerHTML = `
          <div class="issue-header">
            <span class="issue-browser">${issue.browser}</span>
            <span class="issue-component">${issue.component}</span>
            <span class="issue-severity ${issue.severity}">${issue.severity}</span>
          </div>
          <div class="issue-body">
            <p>${issue.issue}</p>
          </div>
          <div class="issue-actions">
            <button class="btn btn-sm btn-danger delete-issue" data-index="${index}">Delete</button>
          </div>
        `
        issuesContainer.appendChild(issueElement)
      })

      // Add event listeners to delete buttons
      document.querySelectorAll('.delete-issue').forEach((button) => {
        button.addEventListener('click', (e) => {
          const target = e.currentTarget as HTMLElement
          if (!target) return

          const index = parseInt(target.getAttribute('data-index') || '0')
          const issues = JSON.parse(
            localStorage.getItem('compatibility-issues') || '[]'
          )
          issues.splice(index, 1)
          localStorage.setItem('compatibility-issues', JSON.stringify(issues))
          loadIssues()
        })
      })
    }

    // Handle form submission
    form.addEventListener('submit', (e) => {
      e.preventDefault()

      const formData = new FormData(form)
      const issue = {
        browser: formData.get('browser'),
        component: formData.get('component'),
        issue: formData.get('issue'),
        severity: formData.get('severity'),
        timestamp: new Date().toISOString(),
      }

      // Save to localStorage
      const issues = JSON.parse(
        localStorage.getItem('compatibility-issues') || '[]'
      )
      issues.push(issue)
      localStorage.setItem('compatibility-issues', JSON.stringify(issues))

      // Reset form and reload issues
      form.reset()
      loadIssues()
    })

    // Load issues on page load
    loadIssues()
  })
</script>
