---
import { getCollection } from 'astro:content';
import type { CollectionEntry } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import StandardLayout from '../../layouts/StandardLayout.astro';
import Button from '../../components/ui/Button.astro';

type BlogPost = CollectionEntry<'blog'>;

// Get all blog posts, sorted by date
const allBlogPosts = await getCollection('blog', ({ data }) => {
  return import.meta.env.PROD ? !data.draft : true;
});

// Sort by date (newest first)
const sortedPosts = allBlogPosts.sort((a, b) => {
  return new Date(b.data.date).getTime() - new Date(a.data.date).getTime();
});

// Get featured post (first post)
const featuredPost = sortedPosts.length > 0 ? sortedPosts[0] : null;

// Get rest of posts
const remainingPosts = sortedPosts.slice(1);

// Get unique series
const seriesSet = new Set<string>();
sortedPosts.forEach(post => {
  if (post.data.series) {
    seriesSet.add(post.data.series);
  }
});
const allSeries = [...seriesSet];

// Get unique tags
const tagSet = new Set<string>();
sortedPosts.forEach(post => {
  if (post.data.tags) {
    post.data.tags.forEach(tag => tagSet.add(tag));
  }
});
const allTags = [...tagSet];

// Format date function
const formatDate = (dateString: string) => {
  const date = new Date(dateString);
  return date.toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
};

---

<BaseLayout
  title="Blog | Gradiant Ascent"
  description="Explore the latest insights, research, and guides on AI-assisted emotional intelligence from the Gradiant Ascent team."
>
  <StandardLayout
    title="Blog"
    subtitle="Insights and updates from our team"
  >
    <div slot="article" class="max-w-6xl mx-auto w-full">
      <!-- Featured Post -->
      {featuredPost && (
        <div class="mb-12">
          <div class="relative rounded-lg overflow-hidden">
            <img
              src={featuredPost.data.image || 'https://images.unsplash.com/photo-1507146153580-69a1fe6d8aa1?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80'}
              alt={featuredPost.data.title}
              class="w-full h-96 object-cover"
            />
            <div class="absolute inset-0 bg-gradient-to-t from-black/70 to-transparent flex flex-col justify-end p-6">
              {featuredPost.data.series && (
                <span class="text-blue-300 text-sm font-medium mb-2">{featuredPost.data.series} Series</span>
              )}
              <h2 class="text-white text-3xl font-bold mb-2">{featuredPost.data.title}</h2>
              <p class="text-gray-200 mb-4">{featuredPost.data.description}</p>
              <div class="flex items-center justify-between">
                <span class="text-gray-300 text-sm">
                  {formatDate(featuredPost.data.date)} â€¢ {featuredPost.data.author}
                </span>
                <Button href={`/blog/${featuredPost.slug}`} variant="primary" size="sm">Read More</Button>
              </div>
            </div>
          </div>
        </div>
      )}

      <!-- Series Section (if any) -->
      {allSeries.length > 0 && (
        <div class="mb-12">
          <h2 class="text-2xl font-bold mb-6">Featured Series</h2>
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {allSeries.map((series) => {
              const seriesPosts = sortedPosts.filter((post) => post.data.series === series);
              const seriesSlug = series.toLowerCase().replace(/\s+/g, '-');

              return (
                <div class="bg-white dark:bg-gray-800 rounded-lg overflow-hidden shadow-md">
                  <div class="p-6">
                    <h3 class="text-xl font-semibold mb-2">{series} Series</h3>
                    <p class="text-gray-600 dark:text-gray-300 mb-4">
                      {seriesPosts.length} article{seriesPosts.length !== 1 ? 's' : ''}
                    </p>
                    <ul class="space-y-2 mb-4">
                      {seriesPosts.slice(0, 3).map((post) => (
                        <li>
                          <a
                            href={`/blog/${post.slug}`}
                            class="text-blue-600 dark:text-blue-400 hover:underline"
                          >
                            {post.data.title}
                          </a>
                        </li>
                      ))}
                    </ul>
                    <Button href={`/blog/${seriesSlug}`} variant="outline" size="sm">
                      View Series
                    </Button>
                  </div>
                </div>
              );
            })}
          </div>
        </div>
      )}

      <!-- Blog Grid -->
      <div class="mb-12">
        <h2 class="text-2xl font-bold mb-6">Latest Articles</h2>
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
          {remainingPosts.map((post) => (
            <div class="bg-white dark:bg-gray-800 rounded-lg overflow-hidden shadow-md transition-transform hover:scale-[1.02]">
              <a href={`/blog/${post.slug}`}>
                <img
                  src={post.data.image || 'https://images.unsplash.com/photo-1573164713988-8665fc963095?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80'}
                  alt={post.data.title}
                  class="w-full h-48 object-cover"
                />
              </a>
              <div class="p-6">
                {post.data.series && (
                  <span class="text-blue-600 dark:text-blue-400 text-sm font-medium">{post.data.series}</span>
                )}
                <a href={`/blog/${post.slug}`} class="block mt-2">
                  <h3 class="text-xl font-semibold text-gray-900 dark:text-white hover:text-blue-600 dark:hover:text-blue-400">{post.data.title}</h3>
                </a>
                <p class="mt-3 text-gray-600 dark:text-gray-300">{post.data.description}</p>
                <div class="mt-4 flex items-center justify-between">
                  <span class="text-sm text-gray-500 dark:text-gray-400">{formatDate(post.data.date)}</span>
                  <span class="text-sm text-gray-500 dark:text-gray-400">{post.data.author}</span>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      <!-- Tags Section -->
      {allTags.length > 0 && (
        <div class="mb-12">
          <h2 class="text-2xl font-bold mb-6">Browse by Topic</h2>
          <div class="flex flex-wrap gap-3">
            {allTags.map((tag) => (
              <a
                href={`/blog/tag/${tag}`}
                class="px-4 py-2 bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 rounded-full text-sm hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors"
              >
                #{tag}
              </a>
            ))}
          </div>
        </div>
      )}
    </div>
  </StandardLayout>
</BaseLayout>

<style>
  /* Add hover effect to blog cards */
  .blog-card {
    transition: transform 0.2s ease-in-out;
  }

  .blog-card:hover {
    transform: translateY(-5px);
  }
</style>