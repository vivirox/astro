---
import type { CollectionEntry } from 'astro:content'
import { getCollection } from 'astro:content'
import BaseLayout from '~/layouts/BaseLayout.astro'
import StandardLayout from '~/layouts/StandardLayout.astro'
import Toc from '~/components/toc/Toc.astro'
import ShareLink from '~/components/widgets/ShareLink.astro'
import Warning from '~/components/base/Warning.astro'
import { formatDate } from '~/utils/datetime'
import { FEATURES } from '~/config'

// Define frontmatter interface
interface Frontmatter {
  title: string
  description: string
  pubDate: Date
  lastModDate?: Date
  ogImage?: string | boolean
  toc?: boolean
  share?: boolean
}

// Set prerender to true for static generation
export const prerender = true

export async function getStaticPaths() {
  const posts = await getCollection('changelog')
  return posts.map((post) => ({
    params: { slug: post.slug },
    props: { post },
  }))
}

const { post } = Astro.props as { post: CollectionEntry<'changelog'> }
const { data: frontmatter } = post as { data: Frontmatter }
const { Content, headings } = await post.render()
const { share, toc } = FEATURES

// Format dates
const pubDate = frontmatter.pubDate?.toISOString()
const updatedDate = frontmatter.lastModDate?.toISOString()

// Warning message for unpublished posts
const UNPUBLISHED_WARNING = `This article is not yet available.
Please check back later.`
---

<BaseLayout
  title={frontmatter.title}
  description={frontmatter.description}
  ogImage={frontmatter.ogImage}
  {pubDate}
  lastModDate={updatedDate}
>
  <StandardLayout title={frontmatter.title}>
    <div slot="head">
      {pubDate && (
        <p class="mt--6! op-50">
          <time datetime={pubDate}>{formatDate(pubDate)}</time>
          {updatedDate && (
            <time datetime={updatedDate}>
              | Updated: {formatDate(updatedDate)}
            </time>
          )}
        </p>
      )}
      {frontmatter.pubDate && new Date(frontmatter.pubDate) > new Date() && (
        <Warning rawHTMLString={UNPUBLISHED_WARNING} />
      )}
    </div>
    <div slot="article">
      {Array.isArray(toc) && toc[0] && frontmatter.toc && <Toc {headings} />}
      <Content />
    </div>
  </StandardLayout>
  <div slot="share">
    {Array.isArray(share) && share[0] && frontmatter.share && (
      <ShareLink config={share[1]} />
    )}
  </div>
</BaseLayout>
